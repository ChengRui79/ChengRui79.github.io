<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2023/05/07/Docker/"/>
    <url>/2023/05/07/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="一、认识docker"><a href="#一、认识docker" class="headerlink" title="一、认识docker"></a>一、认识docker</h2><ul><li>Docker是一个开源的应用容器引擎</li><li>Docker让开发者可以打包他们的应用以及依赖包到一个轻量级可移植的容器中然后发布到任何流行的 Linux或Windows操作系统的机器上</li><li>容器是完全使用沙箱机制，相互之间不会有任何接口，相互隔离</li></ul><h2 id="二、Docker架构"><a href="#二、Docker架构" class="headerlink" title="二、Docker架构"></a>二、Docker架构</h2><p>Docker使用C&#x2F;S架构,<strong>Client 通过接口与Server进程通信实现容器的构建，运行和发布</strong>.client<br>和server可以运行在同一台集群，也可以通过跨主机实现远程通信。</p><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071545985.png" alt="image-20230507092144273"></p><p>Docker技术的三大核心概念，分别是： </p><ul><li>镜像（Image） </li><li>容器（Container） </li><li>仓库（Repostitory）</li></ul><h3 id="Docker镜像（Image）"><a href="#Docker镜像（Image）" class="headerlink" title="Docker镜像（Image）"></a>Docker镜像（Image）</h3><p>Docker 镜像（Image）就是一个只读的模板。例如：一个镜像可以包含一个完整的操作系统<br>环境，里面仅安装了 Apache 或用户需要的其它应用程序</p><ul><li><p>镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。Docker 提供了一个很简单的<br>机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜<br>像来直接使用。</p></li><li><p>镜像（Image）就是一堆只读层（read-only layer）的统一视角</p></li></ul><h3 id="Docker容器（Container）"><a href="#Docker容器（Container）" class="headerlink" title="Docker容器（Container）"></a>Docker容器（Container）</h3><p>Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。我们可以把Image和Container的关系类比于面向对象中的类和对象的关系。</p><ul><li>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</li><li>创建Container首先要有Image，也就是说Container是通过image创建的。<br>Container是在原先的Image之上新加的一层，称作Container layer，这一层是可读可写的（Image是只读的）。<br>在面向对象的编程语言中，有类跟对象的概念。类是抽象的，对象是类的具体实现。Image跟Container可以类比面向对象中的类跟对象，Image就相当于抽象的类，Container就相当于具体实例化的对象。<br>Image跟Container的职责区别：Image负责APP的存储和分发，Container负责运行APP</li></ul><h3 id="Docker仓库（Repostitory）"><a href="#Docker仓库（Repostitory）" class="headerlink" title="Docker仓库（Repostitory）"></a>Docker仓库（Repostitory）</h3><p>仓库（Repository）是集中存放<strong>镜像文件</strong>的场所。有时候会把仓库和仓库注册服务(Registry)混为一谈，并不严格区分。</p><p>实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。<br>仓库分为<strong>公开仓库（Public）和私有仓库（Private）</strong>两种形式。</p><p>最大的公开仓库是 Docker Hub（<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。</a><br>国内的公开仓库包括 阿里云 、网易云 等，可以提供大陆用户更稳定快速的访问。<br>当然，用户也可以在本地网络内创建一个私有仓库。<br>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。<br>Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p><h2 id="三、安装Docker"><a href="#三、安装Docker" class="headerlink" title="三、安装Docker"></a>三、安装Docker</h2><p>1.更新yum包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum update</span><br></code></pre></td></tr></table></figure><p>2.安装yum工具包和存储驱动</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">yum</span> install -y yum-utils device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> lvm2</span><br></code></pre></td></tr></table></figure><p>3.安装Docker的yum源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum-config-manager --add-repo https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.rep<br>如果连接超时，可以使用alibaba源<br>yum-config-manager --add-repo http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.rep<br></code></pre></td></tr></table></figure><p>4.安装Docker</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce<br></code></pre></td></tr></table></figure><p>5.查看Docker版本，验证是否安装成功</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure><h2 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h2><h3 id="Docker进程相关"><a href="#Docker进程相关" class="headerlink" title="Docker进程相关"></a>Docker进程相关</h3><h4 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo service docker <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h4 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span><br></code></pre></td></tr></table></figure><h4 id="Docker-启动和停止"><a href="#Docker-启动和停止" class="headerlink" title="Docker 启动和停止"></a>Docker 启动和停止</h4><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305070951625.png" alt="image-20230507095109572" style="zoom:80%;" /><h3 id="Docker镜像相关"><a href="#Docker镜像相关" class="headerlink" title="Docker镜像相关"></a>Docker镜像相关</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>REPOSITORY：镜像名称<br>TAG：镜像标签<br>IMAGE ID：镜像id<br>CREATED：镜像的创建日期（不是获取该镜像的日期）<br>SIZE：镜像大小</p><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p>网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker <span class="hljs-built_in">search</span> 某个XXX镜像名字<br></code></pre></td></tr></table></figure><p>NAME：镜像名称<br>DESCRIPTION：镜像描述<br>STARS：用户评价，反应一个镜像的受欢迎程度<br>OFFICIAL：是否官方<br>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><ul><li>拉取镜像就是从中央仓库中下载镜像到本地，命令：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull 镜像名字<br></code></pre></td></tr></table></figure><p>拉取镜像的时候默认拉取<strong>最新的版本</strong>，如果想拉取指定版本的话，需要添加版本号信息，不指<br>定版本的话拉取的是latest这个版本的镜像。<br>拉取指定版本的时候追加版本信息（网站：<a href="https://hub.docker.com/">https://hub.docker.com</a>查找）：docker pull centos:7</p><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><ul><li><p>删除单个镜像</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">docker</span> <span class="hljs-variable">rmi</span> -<span class="hljs-variable">f</span> 镜像<span class="hljs-function"><span class="hljs-title">ID</span>(<span class="hljs-variable">IMAGE</span> <span class="hljs-variable">ID</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>删除多个镜像</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker rmi -f 镜像名<span class="hljs-number">1</span>:<span class="hljs-keyword">TAG</span> <span class="hljs-title">镜像名2</span>:<span class="hljs-keyword">TAG</span><br></code></pre></td></tr></table></figure></li><li><p>删除全部</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rmi -f  <span class="hljs-string">&#x27;docker images -qa&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Docker容器相关"><a href="#Docker容器相关" class="headerlink" title="Docker容器相关"></a>Docker容器相关</h3><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><ul><li>查看正在运行的容器</li></ul><blockquote><p>docker ps</p></blockquote><ul><li>查看所有容器</li></ul><blockquote><p>docker ps -a</p></blockquote><ul><li>查看最后一次运行的容器</li></ul><blockquote><p>docker ps -l</p></blockquote><ul><li>查看停止的容器</li></ul><blockquote><p>docker ps -f status&#x3D;exited</p></blockquote><h4 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li><p>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</p><p>–name&#x3D;“容器新名字”: 为容器指定一个名称；<br>-d: 在run后面加上参数-d，会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i-t两个参数，<br>创建后会自动进入容器），并返回容器ID，也即启动守护式容器；<br>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：表示容器启动后会进入其命令行，为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>-p: 表示端口映射，有以下四种格式<br>ip:hostPort:containerPort<br>ip::containerPort<br>hostPort:containerPort<br>containerPort<br>前者表示宿主机端口，后者是容器内的映射端口，可以使用多个-p做多个端口映射</p></li><li><p>启动交互式容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it --name=centos 镜像名称:标签 <span class="hljs-regexp">/bin/</span>bash<br><span class="hljs-keyword">exit</span> 退出容器<br>拉取centos：docker pull centos<br>docker run -id centos <span class="hljs-regexp">/bin/</span>bash 后台运行（不会直接进入容器，进入容器之后<span class="hljs-keyword">exit</span>不会关闭容器）<br>docker exec -it name <span class="hljs-regexp">/bin/</span>bash 进入容器<br></code></pre></td></tr></table></figure></li><li><p>守护式方式创建容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -id --name=容器名称 镜像名称:标签后台运行（不会直接进入容器，进入容器之后<span class="hljs-keyword">exit</span>不会关闭容器）<br>docker run -id --name=mycentos2 centos:latest<br>docker exec -it name <span class="hljs-regexp">/bin/</span>bash 进入容器<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>&#x2F;bin&#x2F;bash的作用是因为docker后台必须运行一个进程，否则容器就会退出，在这里表示启动容<br>器后启动bash。</p></blockquote><p><strong>什么是守护式容器：</strong></p><blockquote><p>能够长期运行、没有交互式会话、适合运行应用程序和服务</p></blockquote><ul><li>退出当前容器</li></ul><blockquote><p>exit</p></blockquote><h4 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h4><ul><li>停止容器</li></ul><blockquote><p>docker stop 容器名称（或者容器id）<br>docker stop mycentos2</p></blockquote><ul><li>启动容器</li></ul><blockquote><p>docker start 容器名称（或者容器id）<br>docker start mycentos2</p></blockquote><ul><li>重启容器</li></ul><blockquote><p>docker restart 容器名称（或者容器id）<br>docker restart mycentos2</p></blockquote><ul><li>强制停止容器</li></ul><blockquote><p>docker kill 容器名称（或者容器id）<br>docker kill mycentos2</p></blockquote><ul><li>删除容器（需先停止容器）</li></ul><blockquote><p>docker rm 容器名称（或者容器id）<br>docker rm mycentos2</p><p>docker rm ‘docker ps -aq’ 通过查询所有容器的id删除所有容器</p></blockquote><ul><li>查看容器信息</li></ul><blockquote><p>docker inspect</p></blockquote><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><p>登陆阿里云开发者平台（<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%89%E8%8E%B7%E5%8F%96%E5%8A%A0%E9%80%9F%E5%99%A8%E5%9C%B0%E5%9D%80">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors）获取加速器地址</a></p><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071545732.png" alt="image-20230507094221339"></p><h2 id="四、Docker容器的数据卷"><a href="#四、Docker容器的数据卷" class="headerlink" title="四、Docker容器的数据卷"></a>四、Docker容器的数据卷</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>思考：</p><ul><li>Docker容器删除后，在容器中产生的数据会随之销毁</li><li>Docker容器和外部机器不可以直接交换文件</li><li>容器之间数据交换</li></ul><p>数据卷：</p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷绑定后，对方修改会立即同步</li><li>一个容器可以挂载多个数据卷</li></ul><p>数据卷作用：</p><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h3><p>可以在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样就可以通过修改宿主机的某个目录的文件从而去影响容器。<br>创建容器添加-v参数，后边为宿主机目录:容器目录，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it -v <span class="hljs-regexp">/root/</span>data<span class="hljs-regexp">/:/</span>root/data --name=c1 centos:<span class="hljs-number">7</span>一个容器挂载一个数据卷<br>docker run -it --name=c2 -v <span class="hljs-regexp">/root/</span>data<span class="hljs-regexp">/:/</span>root<span class="hljs-regexp">/data -v /</span>root<span class="hljs-regexp">/data1/</span>:<span class="hljs-regexp">/root/</span>data1 centos:<span class="hljs-number">7</span> 一个容器挂载多个数据卷<br>docker run -it -v <span class="hljs-regexp">/root/</span>data<span class="hljs-regexp">/:/</span>root/data --name=c3 centos:<span class="hljs-number">7</span><br>docker run -it -v <span class="hljs-regexp">/root/</span>data<span class="hljs-regexp">/:/</span>root/data --name=c4 centos:<span class="hljs-number">7</span> 多个容器挂载同一个数据卷<br></code></pre></td></tr></table></figure><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多容器之间数据交换：</p><ol><li>多个容器挂载同一个数据卷</li><li>数据卷容器</li></ol><h3 id="配置数据卷-1"><a href="#配置数据卷-1" class="headerlink" title="配置数据卷"></a>配置数据卷</h3><p>1.创建启动数据卷容器c3，使用-v参数设置数据卷</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it -v /volume <span class="hljs-attribute">--name</span>=c3 centos:7 /bin/bash<br></code></pre></td></tr></table></figure><p>2.创建启动容器c1,c2，使用–volumes-from参数设置数据卷</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=c1 --volumes-from c3 centos:7 /bin/bash<br>docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=c2 --volumes-from c3 centos:7 /bin/bash<br></code></pre></td></tr></table></figure><h2 id="Docker-应用部署"><a href="#Docker-应用部署" class="headerlink" title="Docker 应用部署"></a>Docker 应用部署</h2><h3 id="MySQL-部署"><a href="#MySQL-部署" class="headerlink" title="MySQL 部署"></a>MySQL 部署</h3><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071548873.png" alt="image-20230507154827799" style="zoom:67%;" /><ul><li>Docker hub上查找mysql镜像</li></ul><blockquote><p>docker search mysql</p></blockquote><ul><li>从Docker Hub上(阿里云加速器)拉取mysql镜像到本地,标签为5.6</li></ul><blockquote><p>docker pull mysql:5.6</p></blockquote><ul><li>创建容器,设置端口映射、目录映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在root目录下创建mysql目录用于存储mysql数据信息</span><br><span class="hljs-built_in">mkdir</span> ~/mysql<br><span class="hljs-built_in">cd</span> ~/mysql<br></code></pre></td></tr></table></figure><blockquote><p>docker run -id \</p><p> –name&#x3D;c_mysql \</p><p> -p 3307:3306 \</p><p>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \</p><p>-v $PWD&#x2F;logs:&#x2F;logs \</p><p>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;123456 <br>mysql:5.6</p></blockquote><p>-p 代表端口映射，格式为<strong>宿主机映射端口:容器运行端口</strong><br>-e 代表添加环境变量，MYSQL_ROOT_PASSWORD是root用户的登录密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it c_mysql <span class="hljs-regexp">/bin/</span>bash 进入mysql容器<br>mysql -uroot -p123456 进入mysql<br></code></pre></td></tr></table></figure><ul><li><p>使用mysql客户端navicat连接</p><p>注意这里端口已被映射为3307（一般我们映射3306）</p></li></ul><h3 id="tomcat-部署"><a href="#tomcat-部署" class="headerlink" title="tomcat 部署"></a>tomcat 部署</h3><ul><li>Docker hub上查找tomcat镜像</li></ul><blockquote><p>docker search tomcat</p></blockquote><ul><li>从Docker Hub上(阿里云加速器)拉取tomcat镜像</li></ul><blockquote><p>docker pull tomcat</p></blockquote><ul><li>创建容器,设置端口映射、目录映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在root目录下创建tomcat目录用于存储tomcat数据信息</span><br><span class="hljs-built_in">mkdir</span> ~/tomcat<br><span class="hljs-built_in">cd</span> ~/tomcat<br></code></pre></td></tr></table></figure><blockquote><p>docker run -id \</p><p> –name&#x3D;c_tomcat \</p><p> -p 8080:8080 \</p><p>-v $PWD：&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps \</p><p>tomcat</p></blockquote><h3 id="Nginx-部署"><a href="#Nginx-部署" class="headerlink" title="Nginx 部署"></a>Nginx 部署</h3><ul><li>Docker hub上查找Nginx镜像</li></ul><blockquote><p>docker search nginx</p></blockquote><ul><li>从Docker Hub上(阿里云加速器)拉取Nginxl镜像到本地</li></ul><blockquote><p>docker pull nginx</p></blockquote><ul><li>创建容器,设置端口映射、目录映射</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">#在root目录下创建nginx目录用于存储nginx数据信息<br><span class="hljs-built_in">mkdir</span> ~/nginx<br><span class="hljs-keyword">cd</span> ~/nginx<br><span class="hljs-built_in">mkdir</span> <span class="hljs-keyword">conf</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">conf</span><br><span class="hljs-keyword">vim</span> nginx.<span class="hljs-keyword">conf</span> #nginx.<span class="hljs-keyword">conf</span>事先准备用于粘贴<br><span class="hljs-keyword">cd</span> ..<br></code></pre></td></tr></table></figure><blockquote><p>docker run -id \</p><p> –name&#x3D;c_nginx \</p><p> -p 80:80 \</p><p>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</p><p>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \</p><p>-v $PWD&#x2F;html:&#x2F;usr&#x2F;sharer&#x2F;nginx&#x2F;html \</p><p>nginx</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># This is a sample Nginx configuration for Elefant.</span><br><span class="hljs-comment"># Add these to your server&#123;&#125; block, making sure to</span><br><span class="hljs-comment"># adjust the root path and add any additional</span><br><span class="hljs-comment"># configurations you require.</span><br><br><span class="hljs-comment"># Uncomment if required</span><br><br><span class="hljs-comment">## Fast-CGI cache settings</span><br><span class="hljs-comment">#fastcgi_cache_path /tmp levels=1 keys_zone=CACHE:16m inactive=24h;</span><br><span class="hljs-comment">#fastcgi_cache_key &quot;$scheme$request_method$host$request_uri&quot;;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#set $nocache &quot;&quot;;</span><br><span class="hljs-comment">#if ($http_cookie ~ (PHPSESSID)) &#123;</span><br><span class="hljs-comment">#        set $nocache &quot;Y&quot;;</span><br><span class="hljs-comment">#&#125;</span><br><span class="hljs-comment">## &quot;elefant_user&quot; should be replaced by value of session_name from config</span><br><span class="hljs-comment">#if ($http_cookie ~ (elefant_user)) &#123;</span><br><span class="hljs-comment">#        set $nocache &quot;Y&quot;;</span><br><span class="hljs-comment">#&#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#fastcgi_cache           CACHE;</span><br><span class="hljs-comment">#fastcgi_cache_valid     200 302  1d;</span><br><span class="hljs-comment">#fastcgi_cache_valid     301      1d;</span><br><span class="hljs-comment">#fastcgi_cache_valid     any      1m;</span><br><span class="hljs-comment">#fastcgi_cache_min_uses  1;</span><br><span class="hljs-comment">#fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="hljs-comment">#fastcgi_ignore_headers  Set-Cookie Expires Cache-Control;</span><br><span class="hljs-comment">#fastcgi_pass_header     Set-Cookie;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#fastcgi_cache_bypass    $nocache;</span><br><span class="hljs-comment">#fastcgi_no_cache        $nocache;</span><br><br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /conf/ &#123;<br><span class="hljs-attribute">deny</span> all;<br><span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(cache|apps|tests|lib)/.*\.(php|sql)$</span> &#123;<br><span class="hljs-attribute">deny</span> all;<br><span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/files/.*\.(?!(gif|jpe?g|png|mp4|pdf))$</span> &#123;<br><span class="hljs-attribute">add_header</span> Content-disposition <span class="hljs-string">&quot;attachment&quot;</span>;<br>&#125;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">root</span> /var/www/nginx-default;<br><span class="hljs-attribute">index</span> index.php;<br><span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$args</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Redis-部署"><a href="#Redis-部署" class="headerlink" title="Redis 部署"></a>Redis 部署</h3><ul><li>Docker hub上查找redis镜像</li></ul><blockquote><p>docker search redis</p></blockquote><ul><li>从Docker Hub上(阿里云加速器)拉取redis镜像</li></ul><blockquote><p>docker pull redis:5.0</p></blockquote><ul><li>创建容器,设置端口映射</li></ul><blockquote><p>docker run -id \</p><p> –name&#x3D;c_redis \</p><p> -p 6379:6379\</p><p>redis:5.0</p></blockquote><ul><li>使用redis-cli连接</li></ul><blockquote><p>docker exec -it c_redis redis-cli</p></blockquote><ul><li>打开redis客户端连接redis服务器</li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Dockerfile概念"><a href="#Dockerfile概念" class="headerlink" title="Dockerfile概念"></a>Dockerfile概念</h3><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像</p><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境<br>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作<br>对于运维人员：在部署时，可以实现应用的无缝移植</p><h3 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h3><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071653680.png" alt="image-20230507165351604"></p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071659833.png" alt="image-20230507165959629" style="zoom:67%;" /><h3 id="Docker镜像制作"><a href="#Docker镜像制作" class="headerlink" title="Docker镜像制作"></a>Docker镜像制作</h3><p>1.容器转为镜像</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">docker commit 容器id 镜像名称：版本号（镜像名称：版本号自定义）commit命令数据卷挂载内容消失<br>docker <span class="hljs-keyword">save</span> -o 压缩文件名称 镜像名称：版本号（压缩文件名称自定义）<span class="hljs-meta">#压缩镜像</span><br>docker <span class="hljs-keyword">load</span> -i 压缩文件名称 <span class="hljs-meta">#还原镜像</span><br></code></pre></td></tr></table></figure><p>2.Dockerfile</p><h3 id="DockerFile-常用命令"><a href="#DockerFile-常用命令" class="headerlink" title="DockerFile 常用命令"></a>DockerFile 常用命令</h3><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071827176.png" alt="image-20230507182746068"></p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>指明构建的新镜像是来自于哪个基础镜像，例如：</p><blockquote><p>FROM centos: latest</p></blockquote><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>指明镜像维护者及其联系方式（一般是邮箱地址），例如：</p><blockquote><p>MAINTAINER Rui Cheng <a href="mailto:&#99;&#x68;&#101;&#x6e;&#103;&#x72;&#117;&#105;&#x2e;&#x73;&#107;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#99;&#x68;&#101;&#x6e;&#103;&#x72;&#117;&#105;&#x2e;&#x73;&#107;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></p></blockquote><p>不过，MAINTAINER并不推荐使用，更推荐使用LABEL来指定镜像作者，例如：</p><blockquote><p>LABEL maintainer&#x3D;“Rui Cheng”</p></blockquote><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>拷贝文件或目录到镜像中，PS：如果是URL或压缩包，会自动下载或自动解压，例如：</p><blockquote><p>ADD …<br>ADD html.tar.gz &#x2F;var&#x2F;www&#x2F;html<br>ADD <a href="https://xxx.com/html.tar.gz">https://xxx.com/html.tar.gz</a> &#x2F;var&#x2F;www&#x2F;html</p></blockquote><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>启动容器时执行的Shell命令，例如：</p><blockquote><p>CMD [“-C”, “&#x2F;start.sh”]<br>CMD [“&#x2F;usr&#x2F;sbin&#x2F;sshd”, “-D”]<br>CMD &#x2F;usr&#x2F;sbin&#x2F;sshd -D</p></blockquote><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>声明容器运行的服务端口，例如：</p><blockquote><p>EXPOSE 80 443</p></blockquote><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>拷贝文件或目录到镜像中，用法同ADD，只是不支持自动下载和解压，例如：</p><blockquote><p>COPY .&#x2F;start.sh &#x2F;start.sh</p></blockquote><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境内环境变量，例如：</p><blockquote><p>ENV MYSQL_ROOT_PASSWORD 123456<br>ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_45</p></blockquote><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>指定容器挂载点到宿主机自动生成的目录或其他容器，例如：</p><blockquote><p>VOLUME [“&#x2F;var&#x2F;lib&#x2F;mysql”]<br>PS：一般不会在Dockerfile中用到，更常见的还是在docker run的时候指定-v数据卷。</p></blockquote><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录，例如：</p><blockquote><p>WORKDIR &#x2F;data</p></blockquote><h3 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h3><ul><li>准备编写DockerFile文件<br>vim Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:latest<br><span class="hljs-keyword">MAINTAINER</span> zRuiCheng &lt;chengrui.sk@gmail.com&gt;<br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install vim</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;success--------------ok&quot;</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /bin/bash</span><br></code></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -f DockerFile文件路径 -t mycentos:<span class="hljs-number">1</span>.<span class="hljs-number">1</span> .<br></code></pre></td></tr></table></figure><ul><li>运行镜像创建容器</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -id -p <span class="hljs-number">9000</span>:<span class="hljs-number">8000</span> mycentos:<span class="hljs-number">1</span>.<span class="hljs-number">1</span>（name可默认,端口映射方便外部访问）<br></code></pre></td></tr></table></figure><h2 id="Docker-Compose服务编排"><a href="#Docker-Compose服务编排" class="headerlink" title="Docker Compose服务编排"></a>Docker Compose服务编排</h2><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305071918200.png" alt="image-20230507191809069"></p><h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h3><p><strong>docker-compose是docker的独立产品，因此需要安装docker之后再单独安装docker compose</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.21.1/</span>docker-compose-`uname -s`-`uname -m` -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><span class="hljs-comment">#下载docker-compose文件</span><br>mv docker-compose <span class="hljs-regexp">/usr/</span>local/bin<br><span class="hljs-comment">#将文件复制到/usr/local/bin环境变量下面</span><br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><span class="hljs-comment">#给他一个执行权限</span><br></code></pre></td></tr></table></figure><h3 id="docker-compose卸载"><a href="#docker-compose卸载" class="headerlink" title="docker-compose卸载"></a>docker-compose卸载</h3><p>在 Docker 中，当我们执行 docker pull xxx 的时候 ，它实际上是从 registry.hub.docker.com这个地址去查找，这就是Docker公司为我们提供的公共仓库。<br>在工作中，不可能把企业项目push到公有仓库进行管理。为了更好的管理镜像，Docker不仅提供了一个中央仓库，同时允许搭建本地私有仓库。介绍registry、harbor两种私有仓库搭建。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h2 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h2><h3 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h3><ul><li>Docker 官方提供了一个搭建私有仓库的镜像 registry ，只需把镜像下载下来，运行容器并暴<br>露5000端口，就可以使用了。</li></ul><blockquote><p>docker pull registry:2</p></blockquote><blockquote><p>docker run -id -v &#x2F;opt&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry -p 5000:5000 –name&#x3D;myregistry registry:2</p></blockquote><p>Registry服务默认会将上传的镜像保存在容器的&#x2F;var&#x2F;lib&#x2F;registry，将主机的&#x2F;opt&#x2F;registry目录挂载<br>到该目录，即可实现将镜像保存到主机的&#x2F;opt&#x2F;registry目录了。</p><ul><li>浏览器访问http:&#x2F;&#x2F;私有服务器ip：5000&#x2F;v2&#x2F;__catalog，出现json说明registry运行正常</li></ul><h3 id="将本地镜像上传至私有仓库"><a href="#将本地镜像上传至私有仓库" class="headerlink" title="将本地镜像上传至私有仓库"></a>将本地镜像上传至私有仓库</h3><ul><li>要通过docker tag将该镜像标志为要推送到私有仓库：</li></ul><blockquote><p>docker tag nginx:latest 私有服务器ip:5000&#x2F;nginx:latest</p></blockquote><ul><li>通过 docker push 命令将 nginx 镜像 push到私有仓库中：</li></ul><blockquote><p>docker push 私有服务器ip:5000&#x2F;nginx:latest</p></blockquote><ul><li>访问 http:&#x2F;&#x2F;:私有服务器ip:5000&#x2F;v2&#x2F;_catalog 查看私有仓库目录，可以看到刚上传的镜像了：</li></ul><blockquote><p> http:&#x2F;&#x2F;:私有服务器ip:5000&#x2F;v2&#x2F;_catalog</p></blockquote><h3 id="从私有仓库拉取镜像"><a href="#从私有仓库拉取镜像" class="headerlink" title="从私有仓库拉取镜像"></a>从私有仓库拉取镜像</h3><ul><li>下载私有仓库的镜像，使用如下命令：</li></ul><blockquote><p>docker pull 私有服务器ip:5000&#x2F;镜像名:版本号<br>docker pull 私有服务器ip:5000&#x2F;nginx:latest</p></blockquote><h2 id="Docker与虚拟机对比"><a href="#Docker与虚拟机对比" class="headerlink" title="Docker与虚拟机对比"></a>Docker与虚拟机对比</h2><p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202305072022189.png" alt="image-20230507202214980"></p><hr><p><code>相关项目实践即docker与宝塔/青龙的综合运用待后续补充</code></p>]]></content>
    
    
    <categories>
      
      <category>AT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AT</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>system</title>
    <link href="/2023/04/22/Test%20paper%20distribution%20system/"/>
    <url>/2023/04/22/Test%20paper%20distribution%20system/</url>
    
    <content type="html"><![CDATA[<h1 id="期末考试试卷的审批管理设计方案"><a href="#期末考试试卷的审批管理设计方案" class="headerlink" title="期末考试试卷的审批管理设计方案"></a>期末考试试卷的审批管理设计方案</h1><h2 id="试卷审批系统"><a href="#试卷审批系统" class="headerlink" title="试卷审批系统"></a>试卷审批系统</h2><h2 id="组员名单及分工"><a href="#组员名单及分工" class="headerlink" title="组员名单及分工:"></a>组员名单及分工:</h2><table><thead><tr><th>成员</th><th>学号</th><th>姓名</th><th>职责</th></tr></thead><tbody><tr><td>组长</td><td>***********</td><td>CR</td><td>方案总体设计</td></tr><tr><td>组员</td><td>***********</td><td>PQF</td><td>相关技术文档支持</td></tr><tr><td>组员</td><td>***********</td><td>CFY</td><td>流程图及相关责任追究方案设计</td></tr></tbody></table><h3 id="Abstarct"><a href="#Abstarct" class="headerlink" title="Abstarct"></a>Abstarct</h3><p>基于信息安全技术完成一个大学期末试卷保密系统，参与者有各科出卷老师，试卷审核人员，学校教务处，印刷厂。</p><p><strong>过程图（供参考以实际方案为主）</strong>：</p><p>图1 流程图</p><p> <img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304281243875.png" alt="image-20230428124301703"></p><h3 id="一、主要流程"><a href="#一、主要流程" class="headerlink" title="一、主要流程"></a>一、主要流程</h3><p>设计思路如下，出卷老师和相应试卷审核人员彼此在对方加密通信联系人列表中；试卷审核人员，学校教务处彼此在对方加密通信联系人列表中；出卷老师和学校教务处彼此在对方加密通信联系人列表中。</p><p>在设计数据库时考虑到该系统具有一定特殊性（往往一个角色用户只需登陆一次系统进行操作），同时因为为了避免salt存入数据库，采取的SHA-512前后端两次加密的salt均是固定的，为了降低攻击者使用彩虹表或其他预先计算的哈希表来查找已知的哈希值，该系统各科登录权限只给一人，权限以3为一个循环，1对应出卷老师；2对应试卷审核人员；3对应学校教务处（这个随时变化的特性一定程度上保证了加密的不可破译）。</p><p>密码采用SHA-512加盐加密，存入数据库的salt也进行加密，出卷人拥有该科目系统的初始密码。</p><p>出卷老师出完试卷后登录系统，上传试卷后，选择退出登录（系统产生一个操作日志存入数据库中），这时该科目系统的账户用户名密码被重置（账户名和密码对出卷人不可见），权限更改为2，系统会请求调用出卷人的私钥通过第三方工具对账户的用户名和密码信息进行数字签名，并以邮件的方式发送到下一级试卷审核人员的手中。</p><p>试卷审核人员收到邮件后，通过私钥解密邮件内容，并且使用发件人的公钥验证邮件的来源和完整性。确认无误后，试卷审核人员使用账户的用户名和密码进行登录，登录后系统自动开启屏幕监控，后台监控，及摄像头，这些数据会呈现在学校教务处的系统中，审核人员审核试卷不通过，注明原因，选择退出登录系统产生一个操作日志存入数据库中）这时该科目系统的账户用户名密码被重置（账户名和密码对出卷人不可见），权限更改为1，系统会请求调用试卷审核人员的私钥通过第三方工具对账户的用户名和密码信息进行数字签名，并以邮件的方式发送到上一级出卷老师的手中。</p><p>出卷老师接收到邮件重新进入系统修改试卷并提交，重复上列循环。审核人员审核试卷通过则退出登录（系统产生一个操作日志存入数据库中），这时该科目系统的账户用户名密码被重置（账户名和密码对出卷人不可见），权限更改为3，系统会请求调用试卷审核人员的私钥通过第三方工具对账户的用户名和密码信息进行数字签名，并以邮件的方式发送到下一级学校教务处的手中。</p><p>学校教务处收到邮件后，通过私钥解密邮件内容，并且使用发件人的公钥验证邮件的来源和完整性。确认无误后，学校教务处使用账户的用户名和密码进行登录，登录后系统自动开启屏幕监控，后台监控，及摄像头，这些数据会存储在服务器中，学校教务处审核试卷审核人员的操作记录，及试卷（试卷默认基本不会被教务退回，若退回则一层一层递回到出卷人手中），若学校教务处判定试卷审核人员登录过程中出现异常行为，则要求试卷审核人员进行合理解释若解释通过则该试卷通过审核，若解释不通过则该试卷废除，学校教务处退出登录，系统权限设为1，系统会请求调用学校教务处的私钥通过第三方工具对账户的用户名和密码信息进行数字签名，并以邮件的方式发送到出卷老师的手中。若学校教务处判定试卷审核人员登录过程中合格，试卷无误后审核通过，该试卷会被封存在系统中（学校教务处也不可再次查看），并定时发送到印刷厂。</p><p>在考试结束后，下一学期出卷开始前该系统的账户密码将再次重置并发送到相应学科出卷教师手中</p><h3 id="二、对于上述描述还需做出以下补充"><a href="#二、对于上述描述还需做出以下补充" class="headerlink" title="二、对于上述描述还需做出以下补充"></a>二、对于上述描述还需做出以下补充</h3><p>审计日志：在系统的各个环节中，都记录了审计日志，以便后续的审查和调查。审计日志包括登录、操作和错误信息等。</p><p>访问控制：对于不同的用户角色和操作，需要采用不同的访问控制策略，以保护敏感信息的安全性。例如，对于学校教务处的用户，限制他们只能访问和审核自己的科目试卷，而不能访问其他科目的试卷。</p><p>引入数据加密：除了采用SHA-512加盐加密存储密码之外，数据库中的其他敏感信息也进行了加密，例如试卷内容、操作日志等，以提高系统的保密性。</p><p>定期进行安全评估：对于这样的安全系统，需要定期进行安全评估，以发现潜在的安全漏洞和风险，并采取相应的措施加以修复和改进。</p><p>对于试卷的加密：考试中心应建立专门的数据管理部门，并配备专业的技术人员，负责试卷加密和解密。试卷的加密应采用对称加密算法，如AES算法，并设置不同的密钥，每次考试使用不同的密钥加密试卷，确保试卷的安全性。加密后的试卷应存放在安全的物理介质上，并设有防盗、防火、防潮等保护措施，以确保试卷的完整性和保密性。考试中心应建立专门的加密和解密工作人员名单，并制定相关的加密操作规范和标准化流程，确保加密过程的规范性和严密性。加密工作人员必须签署保密协议，并接受安全培训和考核，确保加密过程的安全性和保密性。如发现加密人员存在违规操作或泄密行为，应立即启动责任追究程序，对违规人员进行严肃处理，并进行相应的补救措施，以确保考试安全。</p><p>对于试卷的分发和回收：试卷的分发和回收应由专人负责，试卷应在考前按照预定计划，由考试中心工作人员按照规定时间、地点进行统一发放。考试结束后，试卷应立即由监考人员进行回收，并在现场进行初步检查和封存，确保试卷的完整性和保密性。</p><p>试卷审核人员和学校教务处使用账户的用户名和密码进行登录：该信息在传输过程中可能会被拦截和窃取，采用使用双因素认证，例如短信验证码或令牌。</p><h3 id="三、相应的责任追究机制"><a href="#三、相应的责任追究机制" class="headerlink" title="三、相应的责任追究机制"></a>三、相应的责任追究机制</h3><p>试卷制作人员：如果泄露是由于试卷制作过程中出现疏忽或失误导致的，制作人员应该承担第一责任人的责任。</p><p>试卷加密人员：如果泄露是由于试卷加密过程中出现问题，导致试卷被解密或密码被泄露，加密人员应该承担第一责任人的责任。</p><p>试卷保管人员：如果泄露是由于试卷在保管过程中被盗窃、遗失或被他人窃取等原因，保管人员应该承担第一责任人的责任。</p><p>学校教务处：如果泄露是由于学校教务处在试卷管理中存在缺陷，如审查不严、监管不力等问题导致的，教务处应该承担第一责任人的责任。</p><p>考试监考人员：如果泄露是由于监考人员在考试过程中出现问题，如放任作弊、违规带手机等导致的，监考人员应该承担第一责任人的责任。</p><p>网络信息中心：如果泄露是由于网络信息中心的网络安全措施不到位，导致试卷在网上传播或被他人非法获取等问题，网络信息中心应该承担第一责任人的责任。</p><p>学生：如果泄露是由于学生个人的行为，如偷拍试卷、传播试卷等问题导致的，学生应该承担第一责任人的责任。</p><p>在责任追究方面，可以采取多种方式，如警告、罚款、停职、降职、解聘等。具体的措施应该根据责任人的情况和泄露的严重程度来确定。同时，在责任追究过程中应该注重事实查清，确保责任人的权益得到保障。</p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>ITS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ITS</tag>
      
      <tag>试卷分发安全系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板使用</title>
    <link href="/2023/04/05/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/05/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="宝塔面板部署Java-web项目的教程"><a href="#宝塔面板部署Java-web项目的教程" class="headerlink" title="宝塔面板部署Java web项目的教程"></a>宝塔面板部署Java web项目的教程</h2><h3 id="步骤一：安装宝塔面板"><a href="#步骤一：安装宝塔面板" class="headerlink" title="步骤一：安装宝塔面板"></a>步骤一：安装宝塔面板</h3><ul><li><p>访问宝塔官网 <a href="https://www.bt.cn/">https://www.bt.cn/</a> ，选择Linux面板，复制安装命令，例如<strong>Centos</strong>安装脚本yum install -y wget &amp;&amp; wget -O install.sh <a href="https://download.bt.cn/install/install_6.0.sh">https://download.bt.cn/install/install_6.0.sh</a> &amp;&amp; sh install.sh ed8484bec。</p></li><li><p>在你的Linux服务器上运行安装命令，等待安装完成。</p></li><li><p>记下安装完成后显示的面板地址、用户名和密码（建议复制到txt文件），用浏览器访问面板地址，登录面板。</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171757788.png" alt="image-20230417175723637" style="zoom:67%;" /><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171758196.png" alt="image-20230417175840135" style="zoom:67%;" /></li></ul><h3 id="步骤二：安装Tomcat和JDK"><a href="#步骤二：安装Tomcat和JDK" class="headerlink" title="步骤二：安装Tomcat和JDK"></a>步骤二：安装Tomcat和JDK</h3><ul><li><p>访问你的宝塔外网地址，登录你的宝塔后台（填写你自己的账号密码）</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171801729.png" alt="image-20230417180102670" style="zoom:67%;" /></li><li><p>在面板上选择软件商店，找到Java项目一键部署，点击安装。</p></li><li><p>安装完成后，点击设置，选择Tomcat版本（根据你的项目需求），点击安装。</p></li><li><p>安装Tomcat的同时，宝塔会自动安装对应版本的JDK，并配置好环境变量。</p></li><li><p>安装完成后，记下Tomcat的端口号（默认为8080），并在你的服务器防火墙和云服务商控制台上开放该端口号。</p></li></ul><h3 id="步骤三：创建数据库并导入数据"><a href="#步骤三：创建数据库并导入数据" class="headerlink" title="步骤三：创建数据库并导入数据"></a>步骤三：创建数据库并导入数据</h3><ul><li><p>在面板上选择数据库，找到MySQL或MariaDB（根据你的项目需求），点击安装。</p></li><li><p>安装完成后，点击设置，设置数据库的root密码，并在高级设置中开启远程连接。（建议远程数据库与本地数据库名相同）</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171821940.png" alt="image-20230417182134865" style="zoom:67%;" /></li><li><p>在你的服务器防火墙和云服务商控制台上开放数据库的端口号（默认为3306）。</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171822151.png" alt="image-20230417182228088" style="zoom:67%;" /></li><li><p>使用数据库管理工具（如Navicat）连接到数据库，创建一个数据库，并导入你的项目所需的数据。</p></li><li><p>关于导入数据在这里你有两个选择</p><p>1.本地使用Navicat点击连接，连接远程数据库，在云端数据库（宝塔内）运行sql语句创建数据</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171820889.png" alt="image-20230417182032822" style="zoom:67%;" /><p>2.在本地数据库创建数据，Navicat点击工具，数据传输，选择已连接的数据库并填写服务器数据库名（建议远程数据库与本地数据库名相同）</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304171817457.png" alt="image-20230417181725385" style="zoom:67%;" /></li></ul><h3 id="步骤四：上传并部署Java-web项目"><a href="#步骤四：上传并部署Java-web项目" class="headerlink" title="步骤四：上传并部署Java web项目"></a>步骤四：上传并部署Java web项目</h3><ul><li>在面板上选择文件管理，进入&#x2F;usr&#x2F;local&#x2F;bt&#x2F;tomcat&#x2F;webapps目录，新建一个目录（如test）。</li><li>进入新建的目录，上传你的Java web项目打包成的war文件（如test.war）。</li><li>解压war文件，并删除war文件。</li><li>在面板上选择Java项目一键部署，点击添加站点，输入域名（如test.com）或IP地址（如123.456.789.0），端口号（如8080），项目名称（如test）。</li><li>点击保存，然后重启Tomcat。</li></ul><h3 id="步骤五：测试访问Java-web项目"><a href="#步骤五：测试访问Java-web项目" class="headerlink" title="步骤五：测试访问Java web项目"></a>步骤五：测试访问Java web项目</h3><ul><li>在浏览器上输入域名或IP地址加端口号加项目名称（如<a href="http://test.com:8080/test">http://test.com:8080/test</a> 或 <a href="http://123.456.789.0:8080/test">http://123.456.789.0:8080/test</a> ），回车访问你的Java web项目。</li><li>如果出现404或其他错误，可以检查你的项目配置文件（如web.xml），Tomcat配置文件（如server.xml），数据库连接信息等是否正确。</li></ul><p>以上教程参考了以下搜索结果：<br>(1) 宝塔Linux部署JavaWeb项目两种方式，图文并茂 - CSDN博客. <a href="https://blog.csdn.net/bakelFF/article/details/122266771">https://blog.csdn.net/bakelFF/article/details/122266771</a>.<br>(2) 【宝塔Linux面板】一键部署Java Web项目 - CSDN博客. <a href="https://blog.csdn.net/kitiyang/article/details/120098693">https://blog.csdn.net/kitiyang/article/details/120098693</a>.<br>(3) 通过宝塔面板部署javaweb项目（个人网站，订单管理系统 …. <a href="https://blog.csdn.net/weixin_51560103/article/details/120027343">https://blog.csdn.net/weixin_51560103/article/details/120027343</a>.</p><h2 id="宝塔面板部署springboot项目的教程"><a href="#宝塔面板部署springboot项目的教程" class="headerlink" title="宝塔面板部署springboot项目的教程"></a>宝塔面板部署springboot项目的教程</h2><h3 id="步骤一：安装宝塔面板-1"><a href="#步骤一：安装宝塔面板-1" class="headerlink" title="步骤一：安装宝塔面板"></a>步骤一：安装宝塔面板</h3><ul><li>相同步骤可参考以上<strong>宝塔面板部署Java web项目的教程</strong>不多赘述</li><li>访问宝塔官网 <a href="https://www.bt.cn/">https://www.bt.cn/</a> ，选择Linux面板，复制安装命令，例如<strong>Centos</strong>安装脚本yum install -y wget &amp;&amp; wget -O install.sh <a href="https://download.bt.cn/install/install_6.0.sh">https://download.bt.cn/install/install_6.0.sh</a> &amp;&amp; sh install.sh ed8484bec。</li><li>在你的Linux服务器上运行安装命令，等待安装完成。</li><li>记下安装完成后显示的面板地址、用户名和密码（建议复制到txt文件），用浏览器访问面板地址，登录面板。</li></ul><h3 id="步骤二：安装JDK"><a href="#步骤二：安装JDK" class="headerlink" title="步骤二：安装JDK"></a>步骤二：安装JDK</h3><ul><li>在面板上选择软件商店，找到Java项目一键部署，点击安装。</li><li>安装完成后，点击设置，选择JDK版本（根据你的项目需求），点击安装。</li><li>安装完成后，检查JDK的环境变量是否正确配置。</li></ul><h3 id="步骤三：创建数据库并导入数据-1"><a href="#步骤三：创建数据库并导入数据-1" class="headerlink" title="步骤三：创建数据库并导入数据"></a>步骤三：创建数据库并导入数据</h3><ul><li>在面板上选择数据库，找到MySQL或MariaDB（根据你的项目需求），点击安装。</li><li>安装完成后，点击设置，设置数据库的root密码，并在高级设置中开启远程连接。</li><li>在你的服务器防火墙和云服务商控制台上开放数据库的端口号（默认为3306）。</li><li>使用数据库管理工具（如Navicat）连接到数据库，创建一个数据库，并导入你的项目所需的数据。</li></ul><h3 id="步骤四：上传并部署springboot项目"><a href="#步骤四：上传并部署springboot项目" class="headerlink" title="步骤四：上传并部署springboot项目"></a>步骤四：上传并部署springboot项目</h3><ul><li><p>在面板上选择文件管理，上传你的springboot项目打包成的jar文件（如test.jar）到任意目录（如&#x2F;usr&#x2F;local&#x2F;bt&#x2F;test）。</p></li><li><p>在面板上选择Java项目一键部署，点击添加站点，输入域名（如test.com）或IP地址（如123.456.789.0），端口号（如8400），项目名称（如test）。</p></li><li><p>点击保存，然后启动springboot项目。</p></li><li><p>启动命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar match.jar 运行jar包, 终端关闭后就会停止运行<br>nohup java -jar match.jar 持续运行jar包, 终端关闭后不会停止运行<br></code></pre></td></tr></table></figure></li></ul><h3 id="步骤五：测试访问springboot项目"><a href="#步骤五：测试访问springboot项目" class="headerlink" title="步骤五：测试访问springboot项目"></a>步骤五：测试访问springboot项目</h3><ul><li>在浏览器上输入域名或IP地址加端口号（如<a href="http://test.com:8400/">http://test.com:8400</a> 或 <a href="http://123.456.789.0:8400">http://123.456.789.0:8400</a> ），回车访问你的springboot项目。</li><li>如果出现错误，可以检查你的项目日志文件（如&#x2F;usr&#x2F;local&#x2F;bt&#x2F;test&#x2F;test.log），数据库连接信息等是否正确。</li></ul><p>以上教程参考了以下搜索结果：<br>(1) 利用宝塔面板部署springboot项目_工地精神的博客-CSDN博客. <a href="https://blog.csdn.net/txyllyyj/article/details/119277420">https://blog.csdn.net/txyllyyj/article/details/119277420</a>.<br>(2) springboot项目轻松部署到宝塔（服务器） - CSDN博客. <a href="https://blog.csdn.net/li1441853031/article/details/120854480">https://blog.csdn.net/li1441853031/article/details/120854480</a>.<br>(3) Spring Boot 中文文档. <a href="https://springdoc.cn/spring-boot/">https://springdoc.cn/spring-boot/</a>.<br>(4) Spring Boot - 百度百科-验证. <a href="https://www.baike.baidu.com/item/Spring%20Boot/20249767">https://www.baike.baidu.com/item/Spring%20Boot/20249767</a>.<br>(5) JavaでのWeb開発に便利なSpring Bootとは？メリット…｜Udemy …. <a href="https://udemy.benesse.co.jp/development/app/spring-boot.html">https://udemy.benesse.co.jp/development/app/spring-boot.html</a>.</p>]]></content>
    
    
    <categories>
      
      <category>AT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AT</tag>
      
      <tag>宝塔面板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ImageHost</title>
    <link href="/2023/04/05/ImageHost/"/>
    <url>/2023/04/05/ImageHost/</url>
    
    <content type="html"><![CDATA[<p>​我们在Typora编写文章的过程中，会有插入图片，在Typora中，图片是写的路径位置是本地的绝对路径，但当把文章上传到博客编辑的时候，博客是无法访问我们本地图片的路径的。那么如何解决该问题呢？基于博客能访问网上图片的路径的基本特性，所以我们需要把图片上传到一个网页里面存放并生成对应的URL，然后在我们写博客的时候就可以直接使用了该URL了。</p><p>​创建图床的目的是为本地图片等资源生成URL，然后将此连接嵌入到 <code>markdown</code> 编写的博客文章中，以此来解决博客中图片等资源的显示问题。</p><p>​本文介绍一种 PicGo + Github 搭建的个人免费图床并实现与Typora联动，由于创建该文章时我的图床已经搭建完毕故有些步骤不再复现（有点懒），关于搭建过程中本文未指明的一些步骤可以结合相关文章参考。</p><h3 id="下载-PicGo"><a href="#下载-PicGo" class="headerlink" title="下载 PicGo"></a>下载 PicGo</h3><p>PicGo 是一款图片上传的工具，目前支持 SM.SM图床、微博图床，七牛图床，腾讯云COS，阿里云OSS，又拍云，Github 等图床，未来将支持更多图床。</p><p>点击 <a href="https://github.com/Molunerfinn/PicGo/releases">这里</a> 下载 PicGo 工具。根据操作系统选择对应的版本（本人选择的是2.3.1），安装到指定目录。</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051501938.png" style="zoom: 50%;" /><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051505411.png" alt="image-20230405150554320" style="zoom:50%;" /><h2 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h2><p>新建一个Github仓库页面（前提得有Github账户，没有就去申请一个），填入仓库名称，如ImageHost，仓库类型选择 <code>public</code>（切记，否则会造成资源不可访问等问题）</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051510454.png" alt="image-20230405151022400" style="zoom:50%;" /><h2 id="生成-Github-Token"><a href="#生成-Github-Token" class="headerlink" title="生成 Github Token"></a>生成 Github Token</h2><p>点击右上角的头像， 选择 Settings 进入设置页面。</p><p>在打开的页面中， 点击 Developer settings 设置页面。</p><p>进入到权限设置的页面中， 这里选择使用 Personal access tokens。</p><p>并点击 Generate new token 生成一个新的 token。</p><p>填写一个描述信息， 用于我们区分 token 主要是用于做什么， 多个不同的授权码最好分开使用。 这样即使泄露也只是这一个库。勾选 repo 选项， 点击 Generate token 生成授权码。</p><p>token 有时间限制，过了有效期后需要重新生成。</p><p>第一时间复制该token并保存（注意保护，相当于Github密码）， 关闭页面就没有了， 只能重新生成了。<br><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051512629.png" alt="image-20230405151206566" style="zoom:50%;" /></p><h2 id="PicGo配置图片仓库"><a href="#PicGo配置图片仓库" class="headerlink" title="PicGo配置图片仓库"></a>PicGo配置图片仓库</h2><p>这里需要配置GitHub仓库地址、分支名、AccessToken等基础信息。</p><p>自定义域名需要配置为：<a href="https://gcore.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E6%89%8D%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87cdn%E8%AE%BF%E9%97%AE%E5%9B%BE%E7%89%87">https://gcore.jsdelivr.net/gh/用户名/仓库名，这样就才可以通过cdn访问图片</a></p><p>仓库名：GitHub用户名&#x2F;GitHub仓库地址</p><p>分支名：main</p><p>设定Token：GitHub中设定的AccessToken（前文提示保存了，如忘记保存可回到GitHub重新生成）</p><p>设定存储路径：img&#x2F;(可自定义，这里设置的是图片在你Github仓库保存的路径)</p><p>自定义域名：<a href="https://gcore.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@main">https://gcore.jsdelivr.net/gh/用户名/仓库名@main</a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>设定自定义域名</p><p>不填写，加载速度会有点慢，可能会导致你typora的显示很慢甚至显示不出来，但是在博客转存的时候好像没什么问题；</p><p>CDN加速：<a href="https://cdn.jsdelivr.net/gh/GitHub%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%8A%A0%E9%80%9F%E5%9B%BD%E5%86%85%E4%BC%BC%E4%B9%8E%E5%B7%B2%E7%BB%8F%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E4%BA%86%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%8F%AF%E4%BB%A5%E8%AF%95%E8%AF%95%E3%80%82">https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名，这个加速国内似乎已经访问不了了，大家可以试试。</a></p><p>fastly加速：<a href="https://fastly.jsdelivr.net/gh/GitHub%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E6%88%91%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E5%9C%A8Typora%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E6%B2%A1%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E8%BD%AC%E5%AD%98%E7%9A%84%E6%97%B6%E5%80%99%E5%A4%A7%E9%83%A8%E5%88%86%E5%9B%BE%E7%89%87%E9%83%BD%E6%98%AF%E8%BD%AC%E5%AD%98%E5%A4%B1%E8%B4%A5%E3%80%82">https://fastly.jsdelivr.net/gh/GitHub账户名/仓库名，我使用这个在Typora显示图片没问题，但是在转存的时候大部分图片都是转存失败。</a></p><p>gcore加速：<a href="https://gcore.jsdelivr.net/gh/GitHub%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://gcore.jsdelivr.net/gh/GitHub账户名/仓库名</a> ，这个使用过程中还是有少量的图片转存失败。</p><p>温馨提示</p><p>如果这三个加速不行，可以尝试在链接末尾添加**@main**，举例CDN加速：<a href="https://cdn.jsdelivr.net/gh/GitHub%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@main%EF%BC%8C%E8%BF%99%E6%A0%B7%E8%BF%98%E6%98%AF%E4%B8%8D%E8%A1%8C%E7%9A%84%E8%AF%9D%E5%B0%B1%E5%8F%AA%E6%9C%89%E5%8F%A6%E6%B1%82%E4%BB%96%E6%B3%95%E4%BA%86%E3%80%82%EF%BC%88%E6%8C%89%E7%85%A7%E6%88%91%E4%B8%8A%E9%9D%A2%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%A1%AB%E5%86%99%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%B7%B2%E8%AF%95%E9%AA%8C%E5%8F%AF%E8%A1%8C%EF%BC%89">https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名@main，这样还是不行的话就只有另求他法了。（按照我上面的格式填写即可，已试验可行）</a></p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051522652.png" alt="image-20230405152241594" style="zoom:50%;" /><h2 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h2><p>相关配置仅供参考，可根据个人习惯调整</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051527072.png" alt="image-20230405152739008" style="zoom:50%;" /><h2 id="PicGo拖拽上传"><a href="#PicGo拖拽上传" class="headerlink" title="PicGo拖拽上传"></a>PicGo拖拽上传</h2><p>切换至Github图床拖拽至此即可上传并生成对应的链接格式至剪切板（上PicGo设置里配置）</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051530430.png" alt="image-202304051530430" style="zoom:50%;" /><h2 id="Typora的设置"><a href="#Typora的设置" class="headerlink" title="Typora的设置"></a>Typora的设置</h2><p>打开Typora偏好设置</p><p>按如下配置（PicGo路径配置自己的安装路径）</p><p>可点击验证图片上传选项验证，验证成功后就表示以后粘贴至Typora的图片将自动上传至你的个人图床</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304051536476.png" alt="image-20230405153655392" style="zoom:50%;" /><p>到这里就实现了PicGo + Github+Typora的联动</p><h2 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h2><p>本文在编写时有意避开了实现过程中的一些错误，如果最终实现上传后，图片在github里面显示不出来或者破裂</p><p>这里我的解决办法是通过修改hosts文件加速github，请尝试如下操作：</p><p>1.打开host文件</p><p>原因是github屏蔽掉了图片，解决办法就是修改host</p><p>路径C:\Windows\System32\drivers\etc\hosts</p><p>2.添加内容</p><p>找到host文件，用记事本格式打开，最下面添加代码，保存退出</p><p>185.199.108.133 raw.githubusercontent.com<br>185.199.109.133 raw.githubusercontent.com<br>185.199.110.133 raw.githubusercontent.com<br>185.199.111.133 raw.githubusercontent.com</p><p>3.不放心就刷新一下dns—在小黑窗口（win+r -&gt; cmd -&gt; ipconfig&#x2F;flushdns -&gt; 回车）</p><p>如果哪一天你发现你的blog无法正常显示，在控制台出现如下资源加载错误：</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304181558194.png" alt="image-20230418155805141" style="zoom:67%;" /><p>那么多半是因为Jsdelivr国内的CDN服务被DNS污染。往往一般是cdn.jsdelivr.net被DNS污染了，而其他代替的地址没有被污染，比如fastly.jsdelivr.net、gcore.jsdelivr.net等。这时候我们就可以批量把图片或者其他静态资源链接中的cdn.jsdelivr.net替换为别的可用的地址（下面自己选一个可用的），等官方修复回去后再替换回去就行了。</p><ul><li><p>无CDN加速</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com/<br></code></pre></td></tr></table></figure></li><li><p>Jsdelivr的DNS被污染</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span><br></code></pre></td></tr></table></figure></li><li><p>Jsdelivr替换后的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//g</span>core.jsdelivr.net<span class="hljs-regexp">/gh/</span><br></code></pre></td></tr></table></figure></li><li><p>可替换的地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">fastly<span class="hljs-selector-class">.jsdelivr</span><span class="hljs-selector-class">.net</span><br>gcore<span class="hljs-selector-class">.jsdelivr</span><span class="hljs-selector-class">.net</span><br>testingcf<span class="hljs-selector-class">.jsdelivr</span><span class="hljs-selector-class">.net</span><br>test1<span class="hljs-selector-class">.jsdelivr</span>.net<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>AT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ImageHost</tag>
      
      <tag>图床</tag>
      
      <tag>AT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML-project</title>
    <link href="/2023/04/05/UML-project/"/>
    <url>/2023/04/05/UML-project/</url>
    
    <content type="html"><![CDATA[<p> 待编内容</p><img src="https://gcore.jsdelivr.net/gh/ChengRui79/ImageHost@main/img/202304050901453.jpg" alt="pexels-charles-1851164" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
      <tag>校园失物招领系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AA</title>
    <link href="/2023/04/03/AA/"/>
    <url>/2023/04/03/AA/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h1><h2 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1  引言"></a>1.1  引言</h2><p>随着经济快速发展，人民的精神生活日益丰富，对健康的意识也提高了，因此参加活动的意愿十分强烈。在此基础上，我们小组选择了拼团系统的制作和学习，借此锻炼我们的实际问题分析解决和团队协作能力。</p><h2 id="1-2-研究内容"><a href="#1-2-研究内容" class="headerlink" title="1.2  研究内容"></a>1.2  研究内容</h2><p>拼团–团队活动AA 制</p><h3 id="1-2-1-组团"><a href="#1-2-1-组团" class="headerlink" title="1.2.1 组团"></a>1.2.1 组团</h3><p>  （1）团长创建(组建) 团队并发布活动消息（时间、起点、主要内容等）；</p><p>（2）加入团员（团员申请参加活动）；</p><p>（3）（团长）确定团队成立，并通知参与人；</p><p>（4）确定团队活动的起始时间，交纳团费（可多次交纳）；</p><h3 id="1-2-2-团队活动"><a href="#1-2-2-团队活动" class="headerlink" title="1.2.2 团队活动"></a>1.2.2 团队活动</h3><p>（1）每次团队活动记录参加人员，活动费用参与人员均摊；</p><p>（2）活动过程中根据需要追加AA 费用，也支持某团员独立追加费用；</p><p>（3）活动结束，计算团队成员分推费用；</p><p>（4）支持输出帐单，并导出到EXCEL 表格中。</p><p>（5）活动结束，生成活动报告。</p><h3 id="1-2-3-开发工具"><a href="#1-2-3-开发工具" class="headerlink" title="1.2.3 开发工具"></a>1.2.3 开发工具</h3><p>（1）后端采用MVC设计模式，使用SpringBoot+MyBatis plus框架，数据库采用MySQL；</p><p>（2）前端采用Bootstrap，视图界面美观；</p><p>（3）使用Docker进行部署；</p><p>（4）系统运行以微服务的方式运行，微服务框架采用Spring Cloud     </p><p>（5）系统项目源码通过git进行管理；</p><h1 id="第2章-需求分析"><a href="#第2章-需求分析" class="headerlink" title="第2章 需求分析"></a>第2章 需求分析</h1><h2 id="2-1-业务流程分析"><a href="#2-1-业务流程分析" class="headerlink" title="2.1      业务流程分析"></a>2.1      业务流程分析</h2><h3 id="2-1-1-基于实验需求的业务分析"><a href="#2-1-1-基于实验需求的业务分析" class="headerlink" title="2.1.1  基于实验需求的业务分析"></a>2.1.1  基于实验需求的业务分析</h3><p>⑴ 组团</p><p>团长创建新团，编辑团队信息，需要一个创建活动页面，提供信息填写与提交。团员申请参加活动需要在首页活动列表增加一个参加活动按钮，触发后添加团员信息到参团记录表。</p><p>⑵ 团队活动</p><p>在导航栏加入参团记录，实现每次团队活动记录参加人员，在团长的管理活动页面添加活动起始按钮以及账单生成按钮，实现AA制。成员可以在管理活动页面（仅参加的活动）独立追加团费，追加费用计入总费用和AA计算，团长结束活动后，打印生成活动报告和账单明细。</p><h3 id="2-1-2-业务流程图及其说明"><a href="#2-1-2-业务流程图及其说明" class="headerlink" title="2.1.2  业务流程图及其说明"></a>2.1.2  业务流程图及其说明</h3><p><img src="/img/AA/clip_image002.png" alt="系统结构图"></p><p>流程说明：首先以游客身份进入系统，可预览团队信息，当用户登录（注册，登录）账户后，可进入拼团系统首页，普通团员有3种操作，分别是：①加入团队：可以看到已创建的团队活动，可以选择加入团队；②创建团队：自己成为团长，输入团队信息创建，获得管理活动权限；③管理团队：创建团队自动成为团长，管理团队只能管理自己创建的团队，获得修改、结束活动，打印活动报告和账单权限；④缴纳团费：可以为自己缴费也可以追加团费，缴费后可以通过AA制导出活动账单到Excel。</p><h2 id="2-2-系统用例分析"><a href="#2-2-系统用例分析" class="headerlink" title="2.2      系统用例分析"></a>2.2      系统用例分析</h2><p><img src="/img/AA/clip_image004.png" alt="系统用例图"></p><h1 id="第3章-概要设计"><a href="#第3章-概要设计" class="headerlink" title="第3章 概要设计"></a>第3章 概要设计</h1><h2 id="3-1-总体架构"><a href="#3-1-总体架构" class="headerlink" title="3.1    总体架构"></a>3.1    总体架构</h2><h3 id="3-1-1-总体架构图"><a href="#3-1-1-总体架构图" class="headerlink" title="3.1.1 总体架构图"></a>3.1.1 总体架构图</h3><p><img src="/img/AA/clip_image006.jpg" alt="系统总体架构图"></p><h2 id="3-2-项目结构"><a href="#3-2-项目结构" class="headerlink" title="3.2      项目结构"></a>3.2      项目结构</h2><h3 id="3-2-1-项目结构图"><a href="#3-2-1-项目结构图" class="headerlink" title="3.2.1    项目结构图"></a>3.2.1    项目结构图</h3><p><img src="/img/AA/clip_image008.png" alt="项目结构图"></p><p>src&#x2F;main&#x2F;java结构说明</p><p>common 存放公共的常量类，自定义异常</p><p>config 存放配置类，相当于xml配置文件</p><p>controller 存控制器，负责接收http请求，转发请求，封装业务数据</p><p>entity存实体类, 用lombok插件生成set get方法</p><p>mapper 数据接口访问层DAO文件</p><p>service 存业务接口service&#x2F;impl下存放实现类</p><p>utils存工具类</p><p>Application.java是系统的启动类</p><p>src&#x2F;main&#x2F;resources下存放配置文件其中</p><p>application.yml是主要配置文件</p><p>webapp&#x2F;page存放jsp页面</p><p>webapp&#x2F;static是存放js ,css ,图片等静态资源的</p><h3 id="3-2-2-项目实现功能"><a href="#3-2-2-项目实现功能" class="headerlink" title="3.2.2    项目实现功能"></a>3.2.2    项目实现功能</h3><p>用户注册登录：</p><p> login.jsp是登陆页面，用户输入用户名密码进行登录，没有账户的用户点击注册跳转到register.jsp，进行注册，注册成功会自动跳转到登录页面。</p><p>加入团队：</p><p> team&#x2F;list.jsp里布置了参加活动按钮，点击即可参与。</p><p>创建团队：</p><p> 选择导航栏的创建活动，输入相关信息提交即可创建。</p><p>管理活动：</p><p> manage.jsp页面提供修改活动、确定活动、结束活动、生成报告、帐单列表、追加费用按钮实现相应功能。</p><p>参团列表：</p><p> joinRecord&#x2F;list.jsp页面展示参团人员记录。</p><p>AA制团费：</p><p> bill.list页面展示账单明细并提供导出excel按钮。</p><p>账单导出excel：</p><p> BillController进行跳转实现本地下载。</p><h3 id="3-2-3-总体流程"><a href="#3-2-3-总体流程" class="headerlink" title="3.2.3 总体流程"></a>3.2.3 总体流程</h3><p> 新用户注册后进行登录，老用户输入用户名&#x2F;手机号进行登录，进入系统界面后可以选择团队加入，也可创建新的团队，成为新团的团长，拥有修改团队信息、生成活动报告、账单等权限，所有团员都可通过参团记录查看各人的拼团情况。活动刚成立处于新建状态，由团长决定活动开始时间和结束时间，活动结束后可生成活动账单，查看AA费用，团员进行缴纳，并支持团长和团员独立追加费用，活动结束后可退出系统。</p><h1 id="第4章-数据库设计"><a href="#第4章-数据库设计" class="headerlink" title="第4章 数据库设计"></a>第4章 数据库设计</h1><h2 id="4-1-数据库选型"><a href="#4-1-数据库选型" class="headerlink" title="4.1 　数据库选型"></a>4.1 　数据库选型</h2><h3 id="4-1-1-几种数据库比较"><a href="#4-1-1-几种数据库比较" class="headerlink" title="4.1.1 　几种数据库比较"></a>4.1.1 　几种数据库比较</h3><p>随着数据库管理系统技术的成熟，目前比较流行的数据库有MySQL、SQL Server、Oracle、Sybase等，而我们本次设计所使用的MySQL，它是最受欢迎的开源SQL数据库管理系统。MySQL是一个快速的、多线程、多用户和健壮的SQL数据库服务器。MySQL服务器支持关键人物、重负载生产系统的使用，也可以将它嵌入到一个大配置的软件中去。而与其他的数据库相比较，MySQL有如下的一些优点：</p><p>1）MySQL是一个关系数据库管理系统</p><p>2）MySQL是开源的</p><p>3）MySQL服务器是一个快速的、可靠的和易于使用的数据库服务器</p><p>4）MySQL服务器工作在客户&#x2F;服务器或嵌入系统中</p><p>5）有大量的MySQL软件可以使用</p><h3 id="4-1-2-MySQL数据库"><a href="#4-1-2-MySQL数据库" class="headerlink" title="4.1.2 　MySQL数据库"></a>4.1.2 　MySQL数据库</h3><p>  MySQL是一个完全免费的数据库系统，是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><h3 id="4-1-3-数据库安全"><a href="#4-1-3-数据库安全" class="headerlink" title="4.1.3 数据库安全"></a>4.1.3 数据库安全</h3><p> 我们采用MD5实现数据库用户表密码的单项加密，先将原来的数据变成一个16个字节的数组，然后将这个长度为16的字节数组用16进制表示，这个16进制的字符串就是加密最后的结果。</p><p><img src="/img/AA/clip_image010.png" alt="MD5加密"></p><h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2    数据库设计"></a>4.2    数据库设计</h2><p><img src="/img/AA/clip_image012.jpg" alt="数据库ER图"></p><p>表4.1 用户表</p><table><thead><tr><th>表名</th><th>用户表 user</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>说明</td><td>记录用户的身份信息以及对系统的相关设置</td><td></td><td></td><td></td></tr><tr><td>字段名</td><td>数据类型</td><td>是否为空</td><td>是否为主键</td><td>说明</td></tr><tr><td>id</td><td>INTEGER</td><td>N</td><td>Y</td><td>用户唯一标志号</td></tr><tr><td>username</td><td>VARCHAR(50)</td><td>Y</td><td>N</td><td>用户昵称</td></tr><tr><td>password</td><td>VARCHAR(255)</td><td>Y</td><td>N</td><td>用户密码</td></tr><tr><td>real_name</td><td>VARCHAR(50)</td><td>Y</td><td>N</td><td>用户真实姓名</td></tr><tr><td>phone</td><td>VARCHAR(255)</td><td>Y</td><td>N</td><td>用户的电话号码</td></tr><tr><td>role</td><td>INTEGER</td><td>Y</td><td>N</td><td>用户是否为管理员</td></tr></tbody></table><p>表4.2 团队表</p><table><thead><tr><th>表名</th><th>团队表team</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>说明</td><td>所选团队信息</td><td></td><td></td><td></td></tr><tr><td>字段名</td><td>数据类型</td><td>是否为空</td><td>是否为主键</td><td>说明</td></tr><tr><td>id</td><td>INTEGER</td><td>N</td><td>Y</td><td>团队</td></tr><tr><td>team_name</td><td>VARCHAR(50)</td><td>Y</td><td>N</td><td>团队名称</td></tr><tr><td>team_leader</td><td>INTEGER</td><td>Y</td><td>N</td><td>团长的id</td></tr><tr><td>start_time</td><td>VARCHAR(50)</td><td>Y</td><td>N</td><td>开始时间</td></tr><tr><td>end_time</td><td>VARCHAR(50)</td><td>Y</td><td>N</td><td>结束时间</td></tr><tr><td>state</td><td>INTEGER</td><td>Y</td><td>N</td><td>团队建立状态</td></tr><tr><td>cost</td><td>DECIMAL（10，2）</td><td>Y</td><td>N</td><td>团队总消费</td></tr></tbody></table><p>表4.3 参团记录表</p><table><thead><tr><th>表名</th><th>用户表 join_record</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>说明</td><td>参团人员记录</td><td></td><td></td><td></td></tr><tr><td>字段名</td><td>数据类型</td><td>是否为空</td><td>是否为主键</td><td>说明</td></tr><tr><td>id</td><td>INTEGER</td><td>N</td><td>Y</td><td>用户唯一标志号</td></tr><tr><td>team_id</td><td>INTEGER</td><td>Y</td><td>N</td><td>团队序号</td></tr><tr><td>user_id</td><td>INTEGER</td><td>Y</td><td>N</td><td>用户序号</td></tr></tbody></table><p>表4.4 账单表</p><table><thead><tr><th>表名</th><th>bill</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>说明</td><td>账单</td><td></td><td></td><td></td></tr><tr><td>字段名</td><td>数据类型</td><td>是否为空</td><td>是否为主键</td><td>说明</td></tr><tr><td>id</td><td>INTEGER</td><td>N</td><td>Y</td><td>用户唯一标志号</td></tr><tr><td>user_id</td><td>INTEGER</td><td>Y</td><td>N</td><td>用户昵称</td></tr><tr><td>team_id</td><td>INTEGER</td><td>Y</td><td>N</td><td>团队名称</td></tr><tr><td>cost</td><td>DECIMAL(10,2)</td><td>Y</td><td>N</td><td>费用</td></tr><tr><td>remark</td><td>VARCHAR(255)</td><td>Y</td><td>N</td><td>备注</td></tr></tbody></table><h1 id="第5章-详细设计"><a href="#第5章-详细设计" class="headerlink" title="第5章 详细设计"></a>第5章 详细设计</h1><h2 id="5-1-数据访问层设计"><a href="#5-1-数据访问层设计" class="headerlink" title="5.1 数据访问层设计"></a>5.1 数据访问层设计</h2><p>表的操作（CURD）:</p><p>项目利用MybatisPlus简化开发，启动即会注入基本CURD，直接面向对象操作，MP内置通用mapper、通用service，每个service都继承IService，在IService里定义了各种方法，帮助我们用少量配置实现大部分CURD操作。</p><p>我们只需要创建TeamMapper、UserMapper等接口，并继承BaseMapper接口，不需要创建SQL映射文件。</p><h2 id="5-2-表示层设计"><a href="#5-2-表示层设计" class="headerlink" title="5.2 表示层设计"></a>5.2 表示层设计</h2><p>（1）登录注册页面设计</p><p>创建一个login的jsp页面，在里面添加一个form表单，在里面设计用户名、密码输入文本框，同时也可以采用手机号登录，以及登录跳转按钮，再添加一个注册用户信息的模态框。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin&lt;form style=&quot;</span><span class="hljs-attr">margin-top:</span> <span class="hljs-attr">-30px</span>;&quot;&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control uname&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control pword m-b&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-block&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;login()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/signup&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: -30px;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control uname&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control pword m-b&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-block&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;loginByPhone()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/signup&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）创建活动页面设计</p><p>在页面展示的中间有一个创建活动的按钮，点击则跳转到创建活动的信息输入页面，通过输入活动名称，费用，开始时间，结束时间，点击提交按钮则创建成功。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;活动名称&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;teamName&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;teamName&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;data.teamName&#125;</span>&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;费用&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;cost&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;cost&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;data.cost&#125;</span>&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;开始时间&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;startTime&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;startTime&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;data.startTime&#125;</span>&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;结束时间&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;endTime&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;endTime&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;data.endTime&#125;</span>&quot;</span>&gt;<br>&lt;button <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn btn-sm btn-primary&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;提交&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>（3）参团记录页面设计</p><p>   在页面展示的右边有一个参团记录的按钮，点击则跳转到参团记录页面，该页面可以看见活动ID，活动名称，以及团员姓名，同时表格的右上方也有刷新按钮，可以实时查看参团记录。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;table-responsive&quot;</span>&gt;<br>           &lt;table <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>           &lt;/table&gt;<br>  &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>（4）活动列表页面设计</p><p>   在页面展示的左边有一个活动列表的按钮，点击则跳转到活动列表页面，该页面可以查看活动ID，活动名称，费用，开始时间，结束时间以及状态，同时也可以进行参加活动这一操作，表格的右上方也有着刷新按钮，确保活动的最新情况。</p><p>   同（3），自适应表格。</p><p>（5）管理活动页面设计</p><p>  该页面在活动列表的操作基础上新增了修改活动，确定成立，结束活动，生成报告，账单列表，追加费用等功能，同时也包含着刷新按钮，以此确保活动的最新情况。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">events: &#123;               // 注册按钮组事件<br>    <span class="hljs-string">&#x27;click #edit&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        edit(<span class="hljs-keyword">row</span>.id)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #setup&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        updateState(<span class="hljs-keyword">row</span>.id, <span class="hljs-number">2</span>)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #finish&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        updateState(<span class="hljs-keyword">row</span>.id, <span class="hljs-number">3</span>)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #appendCost&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        appendCost(<span class="hljs-keyword">row</span>.id)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #genReport&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        genReport(<span class="hljs-keyword">row</span>.id)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #billList&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        billList(<span class="hljs-keyword">row</span>.id)<br>    &#125;,<br>    <span class="hljs-string">&#x27;click #excel&#x27;</span>: <span class="hljs-keyword">function</span> (event, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">row</span>, <span class="hljs-keyword">index</span>) &#123;<br>        excel(<span class="hljs-keyword">row</span>.id)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-业务逻辑层设计"><a href="#5-3-业务逻辑层设计" class="headerlink" title="5.3 业务逻辑层设计"></a>5.3 业务逻辑层设计</h2><p> （1）用户登录</p><p>login.jsp发送请求通过@PostMapping(“&#x2F;login”)找到CommonController的login方法，用mybatisplus提供的方法查询用户表，把查询结果放到httpSession里，方便页面使用。</p><p> （2）加入团队</p><p>  用户登陆进入系统后，点击“参加活动”按钮，该成员会自动加入到团队中，并将用户的信息保存到join_record表中,在JoinRecordController中添加注解，把用户提交的请求通过对url的匹配，分配给List，进行处理并返回结果。</p><p> （3）创建团队</p><p>  用户点击创建团队跳转到teamAdd.jsp，输入新团队相关信息进行创建。</p><p> （4）管理团队</p><p>  用户只可以对自己创建的团队进行信息修改和数据查看，TeamController中根据函数需要的url返回操作成功的消息或者无权操作的提示或者访问对应jsp文件。</p><p> （5）AA缴费</p><p>  请求通过 @PostMapping(“team&#x2F;updateState”)找到TeamController的updateState方法，业务是判断把团队状态修改为结束时，用总团费除以总人数，得到AA制每人的团费，存到账单表。</p><p> （6）账单导出</p><p>在进入帐单列表界面后，点击导出账单，在BillController中进行跳转，实现本地账单下载。请求通过@GetMapping(“&#x2F;bill&#x2F;exportExcel”)找到BillController的exportExcel方法，先查出该团队的账单list，然后设置keys(字段名数组)，columnNames(excel表头)，两者是一一对应的，然后循环账单list, 填充表格，然后调用ExcelUtil.downloadExcel方法导出excel，底层是通过调用apache的POI组件实现的。</p><h2 id="5-4团队合作设计过程实现（git进行下的版本管理）"><a href="#5-4团队合作设计过程实现（git进行下的版本管理）" class="headerlink" title="5.4团队合作设计过程实现（git进行下的版本管理）"></a>5.4团队合作设计过程实现（git进行下的版本管理）</h2><p>计划利用git进行项目的版本管理，专项负责人已掌握通过vscode进行git的分支管理技术，例如git branch xx(创建分支) , git checkout xx(切换分支), git mergexx(项目合并)等操作.因为部分组员在git官网下载的64位版本被系统识别不适用，且尝试与组长沟通解决未果，所以本团队共同商议决定统一将自己实现的部分上交组长，由组长试运行检验，接着通过腾讯会议将已完成部分交付组员并部署下一步各自任务，让团队可以通过共同讨论，参与，实现前后端的功能衔接，最终分别于7.4，7.7，7.9发布三个版本的项目（最终链接已附在目录下方）。为弥补本团队因特殊原因无法完美实现git版本管理功能的遗憾，本团队对此项目的开发进行了开发日志管理，下附开发日志。</p><p><img src="/img/AA/clip_image014.png" alt="日志"></p><h1 id="第六章-测试报告"><a href="#第六章-测试报告" class="headerlink" title="第六章 测试报告"></a>第六章 测试报告</h1><h2 id="6-1-功能检验"><a href="#6-1-功能检验" class="headerlink" title="6.1 功能检验"></a>6.1 功能检验</h2><p>(1)登录页面</p><p><img src="/img/AA/clip_image016.png" alt="登录页面"></p><p>⑵ 注册页面</p><p><img src="/img/AA/clip_image018.png" alt="注册页面"></p><p>(3)   系统首页</p><p><img src="/img/AA/clip_image020.png" alt="系统首页"></p><p>(4)   团长页面</p><p><img src="/img/AA/clip_image022.png" alt="团长页面"></p><p>(5)   团员页面</p><p><img src="/img/AA/clip_image024.png" alt="团员页面"></p><p>不是自己加入的团：</p><p><img src="/img/AA/clip_image026.png" alt="不是自己加入的团"></p><p>(6)   创建团队页面</p><p><img src="/img/AA/clip_image028.png" alt="创建团队页面"></p><p><img src="/img/AA/clip_image030.png" alt="创建团队页面"></p><p>(7)   开始&#x2F;结束活动页面</p><p><img src="/img/AA/clip_image032.png" alt="开始活动页面"></p><p><img src="/img/AA/clip_image034.png" alt="结束活动页面"></p><p>(8)   追加费用页面</p><p><img src="/img/AA/clip_image036.png" alt="追加费用页面"></p><p><img src="/img/AA/clip_image038.png" alt="追加费用页面"></p><p>(9)   缴费页面</p><p><img src="/img/AA/clip_image040.png" alt="缴费页面"></p><p>(10)   AA制账单页面</p><p><img src="/img/AA/clip_image042.png" alt="AA制账单页面"></p><p>(11)   数据库密码安全页面</p><p><img src="/img/AA/clip_image043.png" alt="数据库密码安全页面"></p><p>(12)   导出excel页面</p><p><img src="/img/AA/clip_image045.png" alt="导出excel页面"></p><h1 id="结-论"><a href="#结-论" class="headerlink" title="结 论"></a>结 论</h1><h2 id="1、任务完成情况"><a href="#1、任务完成情况" class="headerlink" title="1、任务完成情况"></a>1、任务完成情况</h2><p>（1）登陆注册功能都可以实现</p><p>（2）团长能够创建活动，但是没有实现通知团员功能</p><p>（3）团员可以申请加入活动</p><p>（4）缴纳团费，模拟缴费，AA制缴费均以实现</p><p>（5）用户可以参加多个活动，且每次团队活动记录参加人员</p><p>（6）成功实现将活动账单导入到Excel表格中</p><p>（7）活动结束后可以生成活动报告</p><p>（7）未能实现Docker部署和以微服务方式运行</p><h2 id="2、问题总结"><a href="#2、问题总结" class="headerlink" title="2、问题总结"></a>2、问题总结</h2><p>[CR]:</p><p>（1）需求分析环节未提前考虑到对团员隐私的保护，虽然考虑到了非拼团创建者无权改变团队活动的状态，但是对生成报告的功能未进行合理保护</p><p>（2）docker已实现将项目部署上传到我们租借的阿里云服务器，但是未能成功运行springboot项目，已尝试百度常用解决办法（关闭防火墙，重启docker，修改登录拦截器）最终依旧未能实现运行，采用本地localhost运行。</p><p><img src="/img/AA/clip_image047.png" alt="img"></p><p><img src="/img/AA/clip_image049.png" alt="img"></p><p>（3）考虑到指导老师于7号提出的建议，特决定对用户表的password实现保护，即采用md5技术实现对其单向加密。</p><p>（4）关于git的版本管理，我们进行了三次大更新，分别完善了其前端页面，AA机制等已上传到github</p><p>[XY]:</p><p>（1）对于MyBatis—Plus的熟悉程度不够，花费一些时间在狂神说上学习了MP后，了解了其中的一些基础。</p><p>（2）对MySQL的认知更深刻了，对其存储、索引、优化等方面都有了一定的掌握。</p><p>（3）经过这次实验，对于MyBatis—Plus的强大功能有了更深层次的认识，采用Maven插件快速生成了Mapper、Model、Service、Controller代码，使用起来相较MyBatis而言更加便捷。</p><p>[XH]:</p><p>(1)Springboot框架不够熟练，花费大量时间在熟悉框架上，致使项目开发匆忙；</p><p>(2) 使用Spring boot报错时，难以定位问题所在；</p><p>(3) 项目的数据传输较为复杂，我经常弄混或忘记； </p><p>(4) 新学习到了导出账单的功能实现；</p><p>(5) 协助编写前端也让我学到很多，例如thymeleaf,提高了页面、代码的复用性，以及对    jQuery的ajax方法的熟悉；</p><p>(6) 经过这次项目，对SpringBoot+MybatisPlus整合更加熟悉，配置文件的减少，让我体验到了效率的提高。</p><p>[XLJ]:</p><p>（1）jQuery的ajax方法不熟悉，所以花费了大量的时间进行准备，以此来完成本次实践项目的前端开发</p><p>（2）表格使用了bootstrapTable,也是通过网上资料的查阅与学习，一步步来进行前端的开发</p><p>（3）在配置弹窗时用到了layer.js方面的知识，通过自身的学习以及组员之间的相互讨论，最终完成了前端的开发。</p><p>  项目源码地址：<a href="https://github.com/ChengRui79/pintuanAA-version3.0.git">https://github.com/ChengRui79/pintuanAA-version3.0.git</a></p><p>  部署服务器url：<a href="http://47.110.34.43/">http://47.110.34.43/</a></p><h1 id="参-考-文-献"><a href="#参-考-文-献" class="headerlink" title="参 考 文 献"></a>参 考 文 献</h1><p>[1] 黑马程序员编著. Java EE企业级应用开发教程[M]. 人民邮电出版社 2017年</p><p>[2] 详细SpringBoot教程之入门[ED&#x2F;OL]：<a href="http://t.csdn.cn/aqMNh">http://t.csdn.cn/aqMNh</a></p><p>[3] Springboot,SSM及SSH的概念、优点、区别及缺点[ED&#x2F;OL]: <a href="http://t.csdn.cn/s4Vbw">http://t.csdn.cn/s4Vbw</a></p><p>[4] Springboot+Mybatis+EasyPOI 进行对MySQL数据库内表进行导入导出[ED&#x2F;OL]: <a href="http://t.csdn.cn/M0R2t">http://t.csdn.cn/M0R2t</a></p><p>[5] SpringBoot开发单体应用[ED&#x2F;OL]: <a href="http://t.csdn.cn/qVn4P">http://t.csdn.cn/qVn4P</a></p><p>[6] mybatis-plus超详细讲解[ED&#x2F;OL]: <a href="http://t.csdn.cn/We21U">http://t.csdn.cn/We21U</a></p><p>[7] MyBatisPlus最新完整教程通俗易懂:</p><p> <a href="https://www.bilibili.com/video/BV17E411N7KN?p=12&share_source=copy_web">https://www.bilibili.com/video/BV17E411N7KN?p=12&amp;share_source=copy_web</a></p><p>[8] 130SSM阶段实战-实战-登录-MD5加密1[ED&#x2F;OL]: <a href="http://www.bilibili.com/video/BV1Va411J7Qd?spm_id_form=333.880.my_history.page.click">http://www.bilibili.com/video/BV1Va411J7Qd?spm_id_form=333.880.my_history.page.click</a></p><p>[9] MD5[ED&#x2F;OL]: <a href="http://t.csdn.cn/pnpjt">http://t.csdn.cn/pnpjt</a></p><p>[10] docker常用命令大全[ED&#x2F;OL]: <a href="https://www.cnblogs.com/qq-965324258/articles/14911469.html">https://www.cnblogs.com/qq-965324258/articles/14911469.html</a></p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
      <tag>AA拼团</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>the reaction to The Art of Software Testing</title>
    <link href="/2023/04/02/The%20Art%20of%20Software%20Testing/"/>
    <url>/2023/04/02/The%20Art%20of%20Software%20Testing/</url>
    
    <content type="html"><![CDATA[<p>本书我最喜欢的一句话：“测试是为发现错误而执行程序的过程”</p><span id="more"></span><p class="note note-primary">本书我最喜欢的一句话：“测试是为发现错误而执行程序的过程”<p><p>某种意义上来说，The Art of Software Testing也正是起源于这句话。</p><h2 id="软件测试的心理学与经济学"><a href="#软件测试的心理学与经济学" class="headerlink" title="软件测试的心理学与经济学"></a>软件测试的心理学与经济学</h2><h3 id="心理学：软件测试是什么？意义何在？"><a href="#心理学：软件测试是什么？意义何在？" class="headerlink" title="心理学：软件测试是什么？意义何在？"></a>心理学：软件测试是什么？意义何在？</h3><p>是什么：“测试是为发现错误而执行程序的过程”</p><p>意义：为软件&#x2F;程序增加价值、可靠性、质量</p><p>​人类行为总是具有高度目标性，确立一个目标有着重要的心理学影响。也就是说理想的状态是我们的初始目的被定为证明程序中存在的错误。从这一角度来看，它向我们暗示了测试往往是一个“施虐”的过程。</p><h3 id="经济学：企图发现程序中所存在的所有的错误的想法是不切实际的"><a href="#经济学：企图发现程序中所存在的所有的错误的想法是不切实际的" class="headerlink" title="经济学：企图发现程序中所存在的所有的错误的想法是不切实际的"></a>经济学：企图发现程序中所存在的所有的错误的想法是不切实际的</h3><p>​为了应对其经济学的挑战，测试之前应该建立某种策略。黑盒测试与白盒测试是两种最普遍的策略</p><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><h4 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h4>]]></content>
    
    
    <categories>
      
      <category>reaction</category>
      
      <category>Software Testing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Testing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android_project</title>
    <link href="/2023/04/02/Android-project/"/>
    <url>/2023/04/02/Android-project/</url>
    
    <content type="html"><![CDATA[<h1 id="移动互联网开发技术-期末大作业"><a href="#移动互联网开发技术-期末大作业" class="headerlink" title="移动互联网开发技术 期末大作业"></a>移动互联网开发技术 期末大作业</h1><h1 id="一、任务与要求"><a href="#一、任务与要求" class="headerlink" title="一、任务与要求"></a>一、任务与要求</h1><ol><li><p>任务描述：开发一个班费日常使用记录的APP，记账员记录班费的收支情况，每笔支出需要包含日期、金额、购买的实物照片、购物小票（如果有）、实物的验收人。班级成员可以查看和查询班费的开支情况，可以在1周内（讨论期）对当笔开支提出质疑，班委成员回复质疑，所有质疑和应答全员可见。班级成员半数以上确认且所有质疑经发起人确认可以close的记录，可以标记为已确认状态，之后任何人无权再修改。超过讨论期未close的质疑自动close。</p></li><li><p>鼓励扩展的功能：记录归档、多班级支持。</p></li><li><p>前后端分离，鼓励使用区块链、跨端开发、云平台等新技术。</p></li></ol><h1 id="二、评分和验收标准"><a href="#二、评分和验收标准" class="headerlink" title="二、评分和验收标准"></a>二、评分和验收标准</h1><p>1.评分标准</p><p><strong>课程考察环节、分值、评价细则与课程目标的对应关系</strong></p><table><thead><tr><th>考察环节</th><th>评价标准</th><th>权重分值&#x2F;100</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>优秀(90-100)</td><td>良好(80-89)</td><td>中等 (70-79)</td><td>及格 (60-69)</td><td>不及格 (&lt;60)</td><td></td><td></td></tr><tr><td>方案  架构</td><td>UI逻辑合理。  数据存储方案合理。  前端和后端的架构和逻辑合理。  后端有访问控制和角色控制和相关逻辑。</td><td>UI逻辑合理。  数据存储方案合理。  前端和后端的架构和逻辑合理。  后端缺少访问控制和角色划分。但业务逻辑或控制逻辑有明显不合理的地方。</td><td>UI逻辑合理。  数据存储方案合理。  后端提供了简单的访问接口，但缺少访问控制。</td><td>UI逻辑合理。  数据存储方案合理。  后端提供了部分访问接口。</td><td>UI逻辑一般。  数据没有远端控制。</td><td>20</td></tr><tr><td>使用工具</td><td>能够在实机和虚拟机上操作演示。  有版本控制。  使用开发工具和技术链配合较好。</td><td>仅能在虚拟机上演示。  有版本控制。  使用了集成开发工具，但各工具配合紧密度一般。</td><td>能在虚拟机上演示。  有版本控制。  使用了单一工具。</td><td>能在虚拟机上演示。  无版本控制。  使用了单一工具。</td><td>无法在虚拟机上演示。</td><td>20</td></tr><tr><td>方法创新</td><td>系统设计有独到见解或设计有较大创新，对课题有较深刻的分析和研究。</td><td>系统设计有所创新，对课题有较正确的分析和研究。</td><td>系统设计正确，论证严密，但见解不多。</td><td>系统设计基本正确，论证基本清楚，但缺乏见解。</td><td>系统设计不对，内容空泛，结构混乱。</td><td>20</td></tr><tr><td>文档质量</td><td>内容准确、完整，文字流畅，排版优美，设计方案内容详实充分。结合核心源代码说明方案的实现。</td><td>内容比较准确、完整，文字比较流畅，排版比较优美，设计方案内容准确。  有源代码说明但对核心代码的把握有偏差。</td><td>内容完整，无大的语法错误，有设计方案内容。  有源代码的copy但缺少说明。</td><td>内容残缺不全，但基本能看懂，有一定的设计方案内容。  源代码缺少说明。</td><td>逻辑混乱，无设计方案内容。  无法对代码给出说明。</td><td>20</td></tr><tr><td>软件质量</td><td>系统有一定的工作量，系统界面优美，软件功能完整，源程序代码规范、清晰、整洁，有较高的质量，无明显bug</td><td>系统界面友好，源程序代码规范，软件质量较好，bug较少</td><td>系统界面一般，源程序代码规范，软件质量一般,bug较多</td><td>系统界面一般，软件质量一般，bug较多，功能基本实现</td><td>软件设计能力差界面一般，软件质量较差，bug较多，功能没有实现</td><td>20</td></tr></tbody></table><h1 id="三、报告内容"><a href="#三、报告内容" class="headerlink" title="三、报告内容"></a>三、报告内容</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><h3 id="1-1任务分解"><a href="#1-1任务分解" class="headerlink" title="1.1任务分解"></a>1.1任务分解</h3><p>系统分为三个功能角色：记账员、班委成员、班级成员，其主要职能如下：</p><p>1.记账员主要对日常的开支进行记录</p><p>2.班委成员主要对班级成员提出的质疑进行回复说明</p><p>3.班级成员主要对记账员记录的开支进行质疑，以及对班委成员的回复进行通过</p><h3 id="1-2开发工具和工具的配合"><a href="#1-2开发工具和工具的配合" class="headerlink" title="1.2开发工具和工具的配合"></a>1.2开发工具和工具的配合</h3><p>  使用的主要开发工具有IntelliJ IDEA2021（后端spring boot项目开发），Android Studio（前端app开发），Mysql（数据库），Navicat for Mysql，夜神模拟器，华为nova7手机（真机安装运行），腾讯云轻量服务器（后端云部署）</p><h2 id="2-总体设计"><a href="#2-总体设计" class="headerlink" title="2 总体设计"></a>2 总体设计</h2><h3 id="2-1设计模式"><a href="#2-1设计模式" class="headerlink" title="2.1设计模式"></a>2.1设计模式</h3><p>​    后端spring boot项目采用MVC设计模式如下图：</p><p><img src="/img/Android-project/clip_image002.gif" alt="spring boot项目结构图"></p><h3 id="2-2Android核心组件"><a href="#2-2Android核心组件" class="headerlink" title="2.2Android核心组件"></a>2.2Android核心组件</h3><p>​    Recylerview、Glide（图片加载）、activity、fragment、Okthhp（实现客户端与服务器端通信）</p><h2 id="3-详细设计"><a href="#3-详细设计" class="headerlink" title="3 详细设计"></a>3 详细设计</h2><h3 id="3-1spring-boot属性配置"><a href="#3-1spring-boot属性配置" class="headerlink" title="3.1spring boot属性配置"></a>3.1spring boot属性配置</h3><p>配置应用端口88，配置腾讯云服务器远端数据库及其密码，以及图片上传云端位置</p><p><strong>server.port</strong>&#x3D;**88<br>** <strong>spring.thymeleaf.cache</strong>&#x3D;<strong>false<br> spring.datasource.name</strong>&#x3D;**spell-group-datasource<br>** <strong>spring.datasource.driverClassName</strong>&#x3D;**com.mysql.cj.jdbc.Driver<br>** <strong>spring.datasource.url</strong>&#x3D;**jdbc:mysql:&#x2F;&#x2F;49.233.46.138:3306&#x2F;jilu?useUnicode&#x3D;true&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;characterEncoding&#x3D;utf8&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false&amp;allowMultiQueries&#x3D;true<br>** <strong>spring.datasource.username</strong>&#x3D;**jilu<br>** <strong>spring.datasource.password</strong>&#x3D;<strong>12345678</strong></p><p>  <strong>file.upload.path</strong>&#x3D;<strong>&#x2F;home&#x2F;Android&#x2F;upload</strong></p><h3 id="3-2Android-Studio定义的部分API地址"><a href="#3-2Android-Studio定义的部分API地址" class="headerlink" title="3.2Android Studio定义的部分API地址"></a>3.2Android Studio定义的部分API地址</h3><p>  下列举了腾讯云服务器url，图片存储url，注册，登录，图片上传，班费列表等API地址</p><p>public static String <em>mainHost</em> &#x3D; “<a href="http://49.233.46.138:88/">http://49.233.46.138:88</a>“;<br> public static String <em>mainImgHost</em> &#x3D; “<a href="http://49.233.46.138:88/public/getImg?path=">http://49.233.46.138:88/public/getImg?path=</a>“;<br> &#x2F;&#x2F;注册<br> public static String <em>regiestUrl</em> &#x3D; “&#x2F;app&#x2F;comments&#x2F;registered”;<br> &#x2F;&#x2F;登录<br> public static String <em>loginUrl</em> &#x3D; “&#x2F;app&#x2F;comments&#x2F;login”;<br> &#x2F;&#x2F;图片上传<br> public static String <em>photoUploadUrl</em> &#x3D; “&#x2F;public&#x2F;photoUpload”;</p><p>&#x2F;&#x2F;班费列表</p><p>​    public static String listAllbanfeiInfoUrl &#x3D; “&#x2F;banfeiInfo&#x2F;list”;</p><h3 id="3-3云服务器配置"><a href="#3-3云服务器配置" class="headerlink" title="3.3云服务器配置"></a>3.3云服务器配置</h3><p>​    1.开放端口88</p><p><img src="/img/Android-project/clip_image004.gif" alt=" 端口开放"></p><p>  2.配置服务器相关（jdk,tomcat,数据库等相关环境安装）</p><p>  3.springboot打jar包上传并启动服务器端（有两种启动方式命令1. java -jar server.jar随终端启动2. nohup java -jar server.jar后台一直运行，为节约系统资源这里采用方式1）</p><p><img src="/img/Android-project/clip_image006.gif" alt="云服务器终端启动服务器端"></p><h3 id="3-4相关功能设计（部分）"><a href="#3-4相关功能设计（部分）" class="headerlink" title="3.4相关功能设计（部分）"></a>3.4相关功能设计（部分）</h3><p>  1.登录</p><p>  后端（controller层）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"> <span class="hljs-meta">@ApiOperation</span>(value = <span class="hljs-string">&quot;登录&quot;</span>, httpMethod = <span class="hljs-string">&quot;POST&quot;</span>, notes = <span class="hljs-string">&quot;加载数据&quot;</span>, response = ResponseData.<span class="hljs-keyword">class</span>)<br><span class="hljs-meta">@ApiImplicitParams</span>(&#123;<br>        <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">&quot;UserAccount&quot;</span>, value = <span class="hljs-string">&quot;账号&quot;</span>, <span class="hljs-keyword">required</span> = <span class="hljs-keyword">false</span>, paramType = <span class="hljs-string">&quot;query&quot;</span>, dataType = <span class="hljs-string">&quot;string&quot;</span>),<br>        <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">&quot;UserPwd&quot;</span>, value = <span class="hljs-string">&quot;密码&quot;</span>, <span class="hljs-keyword">required</span> = <span class="hljs-keyword">false</span>, paramType = <span class="hljs-string">&quot;query&quot;</span>, dataType = <span class="hljs-string">&quot;string&quot;</span>)<br>&#125;)<br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;login&quot;</span>)<br>public ResponseData listAll(<span class="hljs-meta">@ApiIgnore</span> <span class="hljs-built_in">String</span> demoUserAccount, <span class="hljs-meta">@ApiIgnore</span> <span class="hljs-built_in">String</span> demoUserPwd) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserInfo user = userInfoMapper.getUserByAccount(demoUserAccount);<br>        <span class="hljs-keyword">if</span> (demoUserPwd.equals(user.getPassword())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().data(user).success();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().fail(<span class="hljs-number">10003</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().fail(<span class="hljs-number">10002</span>, <span class="hljs-string">&quot;用户不存在&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    前端</p><p>OkGo.<String><em>get</em>(Myapi.<em>mainHost</em>+Myapi.<em>loginUrl</em>)登录请求的接口</p><p>.params(<strong>“UserAccount”</strong>,uname)<br> .params(<strong>“UserPwd”</strong>,pwd)<br> 参数：账号和密码</p><p>ToastUtils.showToast(LoginActivity.this,”登陆成功!”);</p><p>Intent intent3 &#x3D; new Intent(LoginActivity.this,MainActivity.class);</p><p>startActivity(intent3)</p><p>当后端的@RequestParam中的值要和前端的params中的参数命名对应上，登录成功之后跳转到主页</p><p>2.注册</p><p>后端（controller层）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"> <span class="hljs-meta">@ApiOperation</span>(value = <span class="hljs-string">&quot;register&quot;</span>, httpMethod = <span class="hljs-string">&quot;POST&quot;</span>, notes = <span class="hljs-string">&quot;加载数据&quot;</span>, response = UserInfo.<span class="hljs-keyword">class</span>)<br><span class="hljs-meta">@ApiImplicitParams</span>(&#123;<br>        <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">&quot;userAccount&quot;</span>, value = <span class="hljs-string">&quot;手机号&quot;</span>, <span class="hljs-keyword">required</span> = <span class="hljs-keyword">false</span>, paramType = <span class="hljs-string">&quot;query&quot;</span>, dataType = <span class="hljs-string">&quot;string&quot;</span>),<br>        <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">&quot;userName&quot;</span>, value = <span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-keyword">required</span> = <span class="hljs-keyword">false</span>, paramType = <span class="hljs-string">&quot;query&quot;</span>, dataType = <span class="hljs-string">&quot;string&quot;</span>),<br>        <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">&quot;userPwd&quot;</span>, value = <span class="hljs-string">&quot;密码&quot;</span>, <span class="hljs-keyword">required</span> = <span class="hljs-keyword">false</span>, paramType = <span class="hljs-string">&quot;query&quot;</span>, dataType = <span class="hljs-string">&quot;string&quot;</span>), <br>&#125;)<br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;registered&quot;</span>)<br>public ResponseData registered(<span class="hljs-built_in">String</span> userAccount, <span class="hljs-built_in">String</span> userPwd,<span class="hljs-built_in">String</span> logo,<span class="hljs-built_in">String</span> qianming,<span class="hljs-built_in">String</span> phone) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserInfo user = userInfoMapper.getUserByAccount(userAccount);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) &#123;<br>            UserInfo demoUser = <span class="hljs-keyword">new</span> UserInfo();<br>            demoUser.setName(userAccount);<br>            demoUser.setPassword(userPwd);<br>            demoUser.setPhone(phone);<br><br>            userInfoMapper.insertIgnoreNull(demoUser);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().fail(<span class="hljs-number">10001</span>, <span class="hljs-string">&quot;账号已存在，请更换。&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().fail(<span class="hljs-number">500</span>, e.getMessage());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData().success();<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><p>OkGo.<String>post(Myapi.mainHost+Myapi.regiestUrl)表示：网络请求地址</p><p>.params(“userAccount”,name)</p><p>.params(“userPwd”,pwd)</p><p>参数：姓名，密码</p><p>public void onSuccess(Response<String> response) {</p><p>表示请求响应的结果</p><p>if(code &#x3D;&#x3D; 200){</p><p>​          ToastUtils.showToast(RegiestActivity.this,”注册成功!”);</p><p>​          finish();</p><p>​        }else {</p><p>​          ToastUtils.showToast(RegiestActivity.this,”注册失败!”);</p><p>​        }</p><p>这里判断响应的code值，如果是200提示注册成功，反之则提示注册失败</p><p>  注意这里的注册默认为班级成员注册，因为是班级内部记账app，所以记账员及班委成员role需要在数据库内自行设置。</p><p>​    </p><p>4.班费清单列表</p><p>后端（controller层）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">ApiOperation(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;Read&quot;</span>, <span class="hljs-params">httpMethod</span> = <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-params">notes</span> = <span class="hljs-string">&quot;加载数据&quot;</span>, <span class="hljs-params">response</span> = Result.<span class="hljs-params">class</span>)</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;list&quot;</span>)</span><br>public Result <span class="hljs-built_in">list</span><span class="hljs-constructor">All()</span> &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>      List&lt;BanfeiInfo&gt; <span class="hljs-built_in">list</span> = banfeiInfoMapper.<span class="hljs-built_in">list</span><span class="hljs-constructor">All()</span>;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultGenerator</span>.</span></span>gen<span class="hljs-constructor">SuccessResult(<span class="hljs-params">list</span>)</span>;<br>    &#125; catch (Exception e) &#123;<br>        e.print<span class="hljs-constructor">StackTrace()</span>;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultGenerator</span>.</span></span>gen<span class="hljs-constructor">ErrorResult(500,<span class="hljs-params">e</span>.<span class="hljs-params">getMessage</span>()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><p>private void getAllData() {<br>  OkGo.<String><em>post</em>(Myapi.<em>mainHost</em>+ Myapi.<em>listAllbanfeiInfoUrl</em>)<br>       .execute(new StringCallback() {<br>         @Override<br>         public void onSuccess(Response<String> response) {<br>           Log.<em>e</em>(“班费列表”,response.body());<br>           BanFeiBean banFeiBean &#x3D; JSONUtils.<em>parserObject</em>(response.body(),BanFeiBean.class);<br>           int code &#x3D; banFeiBean.getResultCode();</p><p>if(code &#x3D;&#x3D; 200){</p><p>List&lt;BanFeiBean.Data&gt; data &#x3D; banFeiBean.getData();<br> adapter &#x3D; new BanFeiAdapter(BanweiActivity.this,R.layout.<em>list_item_banfei</em>,data);<br> recyclerView.setAdapter(adapter);<br> …}}</p><p>OkGo.<String>post(Myapi.mainHost+ Myapi.listAllbanfeiInfoUrl)接口，无需传入参数，因为查询的是所有的班费列表通过Recyclerview控件展示列表</p><h3 id="3-5技术难点"><a href="#3-5技术难点" class="headerlink" title="3.5技术难点"></a>3.5技术难点</h3><p>通过下载安装包，真机运行班费记录app（脱离usb限制），通过通过签名jks的方式实现。</p><h2 id="4测试及出现过的问题及其解决方法"><a href="#4测试及出现过的问题及其解决方法" class="headerlink" title="4测试及出现过的问题及其解决方法"></a>4测试及出现过的问题及其解决方法</h2><h3 id="4-1测试界面"><a href="#4-1测试界面" class="headerlink" title="4.1测试界面"></a>4.1测试界面</h3><p>1.登录界面（三种身份选择）</p><p><img src="/img/Android-project/clip_image008.gif" alt="登录界面"></p><p>2.注册界面（仅可注册班级成员，记账员及班委为数据库设置）</p><p><img src="/img/Android-project/clip_image010.gif" alt="注册界面"></p><p>4.主页（记账员身份进入）</p><p><img src="/img/Android-project/clip_image012.gif" alt="主页"></p><p>5.记账员发布账单</p><p><img src="/img/Android-project/clip_image014.gif" alt="记账"></p><p><img src="/img/Android-project/clip_image016.gif" alt="账单已更新"></p><p>6.提出质疑</p><p><img src="/img/Android-project/clip_image018.gif" alt=" 班级成员发布质疑"></p><p><img src="/img/Android-project/clip_image020.gif" alt="质疑已公布"></p><p>6.班委回复质疑</p><p><img src="/img/Android-project/clip_image022.gif" alt="班委回复质疑"></p><p><img src="/img/Android-project/clip_image024.gif" alt="质疑已回复"></p><p>8.班级成员通过质疑</p><p><img src="/img/Android-project/clip_image026.gif" alt="班级半数以上确认"></p><p>9.质疑人close质疑（未超过半数班级成员确认关闭无效）</p><p><img src="/img/Android-project/clip_image028.gif" alt="质疑人close质疑"></p><p>10.质疑已close</p><p><img src="/img/Android-project/clip_image030.gif" alt="质疑已关闭"></p><p>  11.真机安装包下载及运行</p><p><img src="/img/Android-project/clip_image031.gif" alt="真机安装包下载及运行 "><img src="/img/Android-project/clip_image033.gif" alt="img"></p><h3 id="4-2出现的问题及解决方案"><a href="#4-2出现的问题及解决方案" class="headerlink" title="4.2出现的问题及解决方案"></a>4.2出现的问题及解决方案</h3><p>​    1.Android Studio开发的客户端打Debug包手机无法安装</p><p><img src="/img/Android-project/clip_image035.gif" alt=" 安装失败"></p><p>​    解决方案：通过签名jks生成release包，最终实现apk打包安装</p><p><img src="/img/Android-project/clip_image037.gif" alt="生成jks文件"></p><p>​    2.云服务器88端口无法访问（端口已开放）</p><p>​    解决方案：查阅资料意识到可能是服务器内的系统放火墙未放通导致，使用systemctl stop firewalld 命令来进行关闭，最终解决问题。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><h3 id="5-1全面总结"><a href="#5-1全面总结" class="headerlink" title="5.1全面总结"></a>5.1全面总结</h3><p>​    本实践采用前后端分离模式开发，基于spring boot的服务器端，Android Studio的客户端实现项目功能。大体实现如下功能：</p><p>记账员：记录班费记录及验收人</p><p>班委：对班级成员的质疑进行回复</p><p>班级成员：对班费账单进行质疑（半数以上班级成员通过才能由质疑人close，或者超过讨论期未close的质疑自动close），通过班委的回复</p><p>在此基础上进行了云部署，成功将服务器端部署到腾讯云服务器上运行，此外客户端通过jks签名打release包安装到了真机运行。</p><p>本项目采用git进行版本控制，仓库地址如下:</p><p><a href="https://github.com/ChengRui79/Android-charge-account.git">https://github.com/ChengRui79/Android-charge-account.git</a></p><p><img src="/img/Android-project/clip_image039.gif" alt="github仓库"></p><h3 id="5-2未完成的部分"><a href="#5-2未完成的部分" class="headerlink" title="5.2未完成的部分"></a>5.2未完成的部分</h3><p>​    未完成的部分有：个人中心（对个人的注册信息及质疑，通过记录进行展示）；多班级支持（可实现多个班级共同使用，即分班级对进行班费使用进行记录）；记录归档功能</p><h3 id="5-3收获"><a href="#5-3收获" class="headerlink" title="5.3收获"></a>5.3收获</h3><p>​    对spring boot的mvc模式开发有了更熟练的掌握，通过前后端分离的采用，使我初步接触了Android客户端与IntelliJ IDEA服务器端基于Okthhp通信的主流网络通信框架。同时也在云平台技术的使用上更加深入（这是我在腾讯云上部署的第二个项目，第一个项目是一个java web项目）相对来说在本次部署难度大了很多，但同时也觉得收获颇丰。当然在前端设计上考虑略有不足，例如在用户注册页面，role显然不适合选择，由于前期分析不足，未考虑权限的特殊性，导致注册页面设计不合理，后删去role选择功能，默认班级成员。希望在以后的学习过程中多多接触新技术，不断提升能力。</p><h2 id="6参考文献"><a href="#6参考文献" class="headerlink" title="6参考文献"></a>6参考文献</h2><p>[1] Android客户端连接服务器- OKHttp的简单实用方法[ED&#x2F;OL]：<a href="https://blog.csdn.net/m0_47761892/article/details/107630036">https://blog.csdn.net/m0_47761892/article/details/107630036</a> </p><p>[2] 如何把android studio中的项目发布到手机上（超详细版）[ED&#x2F;OL]：<a href="https://blog.csdn.net/mlyhzt/article/details/126590913">https://blog.csdn.net/mlyhzt/article/details/126590913</a></p><p>[3] 详细SpringBoot教程之入门[ED&#x2F;OL]：<a href="https://blog.csdn.net/DBC_121/article/details/104383089">https://blog.csdn.net/DBC_121/article/details/104383089</a></p><p>[4] SpringBoot项目打包成jar包部署到宝塔面板(详细) [ED&#x2F;OL]：<a href="https://blog.csdn.net/weixin_47390965/article/details/124666474">https://blog.csdn.net/weixin_47390965/article/details/124666474</a></p><p>[5] 阿里云服务器配置及把java项目部署到服务器[ED&#x2F;OL]：<a href="https://blog.csdn.net/weixin_45831807/article/details/121213809">https://blog.csdn.net/weixin_45831807/article/details/121213809</a></p><p>[6] Spring Boot 接入[ED&#x2F;OL]：<a href="https://cloud.tencent.com/document/product/1416/56031">https://cloud.tencent.com/document/product/1416/56031</a></p><p>[7] Android中Glide的使用[ED&#x2F;OL]：<a href="https://blog.csdn.net/weixin_57542177/article/details/124074397?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167204971716782429745671%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167204971716782429745671&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124074397-null-null.142">https://blog.csdn.net/weixin_57542177/article/details/124074397?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167204971716782429745671%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167204971716782429745671&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124074397-null-null.142</a></p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>Android</tag>
      
      <tag>前后端分离</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/28/hello-world/"/>
    <url>/2023/03/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
